/*
 * Copyright (c) CUBANAPP LLC 2019-2023 .
 */

package com.cubanapp.bolitacubana.ui.pronostico;

import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Typeface;
import android.os.Build;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.navigation.fragment.NavHostFragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.TimeoutError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.cubanapp.bolitacubana.BuildConfig;
import com.cubanapp.bolitacubana.MainActivity;
import com.cubanapp.bolitacubana.R;
import com.cubanapp.bolitacubana.databinding.FragmentAdivinanzasBinding;
import com.google.android.material.snackbar.Snackbar;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.Objects;
import java.util.Set;
import java.util.TimeZone;

public class Adivinanza extends Fragment implements AdivinanzaAdapter.AdivinanzaView.PhotoListener {

    private FragmentAdivinanzasBinding binding;

    //private InterstitialAd mInterstitialAd;

    private boolean adReady = false;

    private SharedPreferences sharedPref;

    private Snackbar mySnackbar;
    private String apiKey;
    private JsonObjectRequest stringRequest;

    private ArrayList<String> keyNames;
    private RequestQueue requestQueue;

    private JSONObject filenames;

    private Set<String> nFiles;

    private PronosticoData[] myListData;

    private RecyclerView recyclerView;

    private AdivinanzaAdapter adapter;

    private static final String DEBUG_TAG = "Adivinanza";

    public View onCreateView(@NonNull LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {

        binding = FragmentAdivinanzasBinding.inflate(inflater, container, false);
        apiKey = BuildConfig.API_KEY;
        keyNames = new ArrayList<>();
        View root = binding.getRoot();
        return root;
    }

    @Override
    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        //Bundle bundle = getIntent().getExtras();
        // ca-app-pub-3940256099942544/1033173712
        //AdRequest adRequest = new AdRequest.Builder().build();
        nFiles = null;
        if(getActivity() != null) {

            if (binding != null) {
                Typeface font = Typeface.createFromAsset(requireContext().getAssets(), "burbank_normal.otf");
                binding.textViewProgress.setTypeface(font);

                //TODO: TEST
                /*String base642 = new String("\\/9j\\/4AAQSkZJRgABAQEASABIAAD\\/2wBDAAQDAwQDAwQEAwQFBAQFBgoHBgYGBg0JCggKDw0QEA8NDw4RExgUERIXEg4PFRwVFxkZGxsbEBQdHx0aHxgaGxr\\/2wBDAQQFBQYFBgwHBwwaEQ8RGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhr\\/wAARCAMgAcIDASIAAhEBAxEB\\/8QAHQABAAICAwEBAAAAAAAAAAAAAAYHBQgBAgQDCf\\/EAGYQAAEDAwEEBAkHBgUOCQsFAQEAAgMEBREGBxIhMQgTQVEUFRciVWFxkdEWMlSBk5ShI0JTscHhNFKi0tMJGCQzNmJyc3SCkpWyszVFVmODhIXD8CUmJyhDR1dldbTxGTc4ZKPC\\/8QAHAEBAAIDAQEBAAAAAAAAAAAAAAEEAgMFBgcI\\/8QAQxEAAgECBAIFCgUCBQMEAwAAAAECAxEEEiExBUETFFGR0SJSU2FxgZKhsdIGFRYywSNCNENy4fAzNYIkorLxRFRi\\/9oADAMBAAIRAxEAPwCQIvjNVRU0ZkqHtiZ2FxxlYObUjqkSNtsJLYwS+aTg0D1d6AkQOfV7eCKM6YrKu4z1EtVMZGBoAaOAyVJkAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBP8AxwRcO+ac9yA5PD3Z4LjIzhYeu33V+IajqXNYHPlfx6sE4AaOX1r4R73h8DX1LqpvW9WybkWOxy4cHAoCQLgnHP8AUgOQCeZCwdW+rdUTBhcIvC4gAc5xgZ7OSAzqLy0jqg9b4U1rQJHbpDs8M8OGF6jwGUATIWDvd2bFTVcFM4tnZDvk45A44fivfai59tpXPOXGMElAe3B7imVhrlTNoqUvZNVSSuIYxgmPM\\/Bc1Y6mooaerqpI6cxESP390OkGOZQGYwe5O\\/sx38FgKWapkt8+6+WWMVGI35y50eexfWmqJ5HOhgD2tdJvRmUec2IY5\\/qQGa58lxkLwXeqdRW2eZpcdzjhvDKhY1RI15exsrXHvcEBYi4yPXx9S+bHjqGOfxG4CfXwWDobi2WeOaqqZfPPmMaCGN7gTyKAkOVxnl61j62qkhiqwInt6qPfbJ2OPcF45hLbX0EnXyy+EStjkD3ZBz24QGcyCCQcrnsWHrm1MFXTO8Kd1Mk7WiJrcADGefasxjJwgHf7MrjeGcfsWEuNRUeGslgk3YKPd65o\\/O3uz6lzf5Zm09N4LIWulmaGlp5jmgM2uM8cdqxrroH2gVTc78jQ1o7d8ndA9666dfI+1s8IkMsge9pc7mcFAZVERAeerooK6Pq6mMSNByAewrDXqySzUMMFtAZFG4uMY\\/O7lb\\/kZ1f9Ai+9R\\/FPIzq\\/6BF96j+KAqTS9JJR0EpljMb3yHgefBZ1T7yM6v8AoEX3qP4p5GdX\\/QIvvUfxQEBRT7yM6v8AoEX3qP4p5GdX\\/QIvvUfxQEBRT7yM6v8AoEX3qP4p5GdX\\/QIvvUfxQEBRT7yM6v8AoEX3qP4p5GdX\\/QIvvUfxQEBRT7yM6v8AoEX3qP4p5GdX\\/QIvvUfxQEBRT7yM6v8AoEX3qP4p5GdX\\/QIvvUfxQEBRT7yM6v8AoEX3qP4p5GdX\\/QIvvUfxQEBRT7yM6v8AoEX3qP4p5GdX\\/QIvvUfxQEBRT7yM6v8AoEX3qP4p5GdX\\/QIvvUfxQEBRT7yM6v8AoEX3qP4p5GdX\\/QIvvUfxQEBRT7yM6v8AoEX3qP4p5GdX\\/QIvvUfxQEBRT7yM6v8AoEX3qP4p5GdX\\/QIvvUfxQEBRT7yM6v8AoEP3qP4p5GtX+j4vvUfxQEBRT4bGtXkfwCL7zH8U8jOr\\/oEX3qP4oCApwHPl2qfeRnV\\/0CL71H8U8jOr\\/oEX3qP4oCq7kySOtjdFAalszOqmiHPAzx\\/H8V0ZC99XSReCvpKSnaXtDiCS4ewlWv5GdX\\/QIvvUfxTyM6v+gRfeo\\/igID7R7Vj3zVnjSOGKNxgMJIO7nzhyVneRnV\\/0CL71H8U8jOr\\/AKBF96j+KArW2ipNGzw8gz5O9wx28F8brWSR008VLG81G5kHd4c8K0PIzq\\/6BF96j+KeRnV\\/0CL71H8UBRD6WrlbWPkikc59Ezm088Nypda2OZbqVrwWuEbQQfYrJ8jOr\\/oEX3qP4p5GdX\\/QIvvUfxQFYOjknugkcMU8EZLP75x5\\/Vhdatpjr4Z5IJKiFrHNwxoduuznl2q0fIzq\\/wCgRfeo\\/inkZ1f9Ai+9R\\/FAVbaYJYPCnvjMYllL4oyfmjAXmnt5\\/JyVLJXukcXTthcRxxhnI8QOP61bfkZ1f9Ai+9R\\/FPIzq\\/6BF96j+KAqO7wTnTjoyx75iwAjGTzUDFuqxzo6gHJ\\/9m74LZjyM6v+gRfeo\\/inkZ1f9Ai+9R\\/FAVy1odTMY443owM\\/5qxJZUvtrbd4LI2VrmtMhHmAA81bnkZ1f9Ai+9R\\/FPIzq\\/6BF96j+KArKpjM8FTTNjcHdUGtkz5rz3e1eORk1e+hY6nki8GlEshcMDgOAHf+5Wz5GdX\\/AECL71H8U8jOr\\/oEX3qP4oCsq+F88lEWNLmtna52OwYK9zzutccE4GcDmVP\\/ACM6v+gRfeo\\/inkZ1f8AQIvvUfxQFT01sM9PM6pmkhkqnOdIwBuBnvyM8iF8ZqWokpbbGInmSnqW72e1rc4d7MYVveRnV\\/0CL71H8U8jOr\\/oEX3qP4oCpobdK25CLdBoGOM7Dn88jl7+K9NkglgoQyZhY7rJCQfW7grQ8jOr\\/oEX3qP4p5GdX\\/QIvvUfxQEBRT7yM6v+gRfeo\\/iiA2e3PX+ATc9f4BdkQHXc9f4BNz1\\/gF2RAddz1\\/gE3PX+AXZEB13PX+ATc9f4BdkQHXc9f4BNz1\\/gF2RAddz1\\/gE3PX+AXZEB13PX+ATc9f4BdkQHXc9f4BNz1\\/gF2RAddz1\\/gE3PX+AXZEB13PX+ATc9f4BdkQHXc9f4BNz1\\/gF2RAddz1\\/gE3PX+AXZDyQHQtA5n8AupOCe7vwF2JBxkhYmvvdLQ1fgrpGeFPYXxxk4LsLVUqRpRzSdkEnJ2iZNzsetdS44GB3Z848FWNDtGr57pEKmmibSvmMJjD\\/yjT38li7Dqe7HVr3yeFT26eqfCW7pIjbnDTled\\/UGFcoqN3eWXbbS9zqfleItLM0rK++\\/+5cbXNIyM+8rxVl7t9u\\/4QraelOcflZWt\\/WqT2p7ZX226u01peQyXE5ZK9mC4uJwGt7u3JVLatqNUWx1JUXCw1VxnqnefJUSFzGDvK7FTFKOkUdXCfh+rUoqviZ9HGWy\\/ufrt2G6VLf7ZWuDaK4UtQ48hHMxx\\/BZFrt4ZyPZhabaSf46pYKy3W2rhq2EhwpmOABB5g9yvrZTqq83g3GhvlHUxx0DmtiqJhjrARwHtH7FspV+k0saOJcFfD4SmqiaW\\/bqWkBn\\/wABc7nr\\/ALqxwLsDuX0Vs86ddz1\\/gE3PX+AXZEB13PX+ATc9f4BdkQHXc9f4BNz1\\/gF2RAddz1\\/gE3PX+AXZEB13PX+ATc9f4BdkQHXc9f4BNz1\\/gF2RAddz1\\/gE3PX+AXZEB13PX+ATc9f4BdkQHXc9f4BNz1\\/gF2RAddz1\\/gE3PX+AXZEB13PX+ATc9f4BdkQHXc9f4BF2RAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQHGV8p3dXE55OA3iSuXvIJwBwWGulwpZzLajVxxVlRC7caTg8jxWirVjTi3dX7H8jKEXOVlfuI1q3U7n0L4tN10MlZESZWsILwztx61FLLBXaroKd0ss8NTQ1HXwXGfBbudrPflfbT2ka91xpZZG0jKK3yuLp4n5dNx4hyltbAahng9PEIaRpJYxoxz7SvntSdfFPrGITStbJrZ2tZp8tefOytoelvTw0ego2b0ebS63un23T2MTcKuzW65yV1voBU3J4G\\/OeDM45gLC1mrbw3LoHx0zAHO3YowOXHuWefZuws4e1Y+ts2aecMZg9W4DHeQVy69XH1JeTLIr7Rst9+V\\/mb6Cwsf+osz9eumi7fkaTv1RUU+qpb3WSvklkqpJJH\\/ncSfx4q9LLtkttZbYaa6U0d3iAG6A9m+3h2tdwz9a15vFFm2VbgMSRTPDj3cVItkOzJmshV3O8Ok8Bp3hkQhk3HOf25OOXBerni1g6EqlR6K3tPqfGsPhaigqifkpWa9iNpNKbRNOVkrKWlJtjncBFUxiLPqB5Ky7dSugndVWuUcgZITycD+ta3XPRLbdb3NsbpZGN4upqh5kDx27pPEH61jdn+3KfZ1fKaj1JVvk0dOHxZfFvy0c27kDPMs4cuOO9W+GcVw+Pj\\/T0a5cz53xLhM54edeg7pbp7m5VDXMq2kgbj28HN7V7mnIWmulOl1Uan2+UGkLfbqaHT1ZWOpGVGCZZPNJaTxwMkDsW5DctaAcZ7V6ZNNaHg5WizuiDkikgIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIDzTndLiATjsAVQG6UerrqLff6fwGsc57YKlg3JGje81vLjy71cb\\/nEKnNs2vRpSW1WyzU1PLqK6SCOlfI0EwZIbv8OPbwXHx+AqY3LGMkop6ppWa+qfsZnTxtLAxnVmn6mm7p+zZ39ZYdosdPY7bFQ0ri9jRlz3c3HvKyDaBmMn8AtdNptv1BsvtVk1FS6luVZcJKprayOoqCYn5GSA3HAcCti7DXOulmoayRu4+ohbIR3Ehb+oUVFWWmyXYUaXEJYirKEk1JWbv6\\/wDmwdQt3eRJ9i8ktA3geR7OHMrI3Ksgt1HNVVcgihhaXvcT2BYvT19hv9lp7sxpgp5Wb7Q8jg3sJVapw6jNWRbWJcZZW9f4\\/wBjS7aXoU6V1pcrXWebQ3TfqaR7RzDnHIx6u5efYxrGm0bd67TF\\/eIKSrnDqWZw4CQnBDuwA5HH4rYDUtqpdtlv1HTRCKnltM25a61o4iQZJyf4pwM+1ay3nSN1qayrs92oZobxQEtc6OInrB2OBA7eHFcnGYFOm6U9Uz61wji+F\\/EXD1CtNKcVa97Xtz\\/g2arbc5hcdwt9WFrD0kdE10dqkv8AZnB1IyRhrqYDi0\\/pBj8VaOze+6kskEVl1jTiWhEZfHVOnDp4mk8N9mSd0d\\/rVgXa20tbBUxVboZ6d0RE0b3B4cztyBns7V5CjgsdwrHQqUYOV+xbo41bGUaVOpRnWSSurpq2hob0ZbfLdtvuiBE1zuquImkx2NY1xyV+uzSCOHfnitSdgWxXT2znXk97tlW+5SVwfFTulY0NpgeOGkccn9QW0lNe7fVVbqOnq4pKlnONrslfUcLi4YqLcE1Z2aas1oeBrxVOUbyTurpp3vuZYcguV0byC7q8YBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAfNwG8SVpjtNvrrj0hKBsxLoqCtp6dg7B54JwtzX8ytG9pNK6j2\\/PGHZfcqeVoxzy4cltpK7Z5rjrkqELecvqi7tvELdRzWGzySCnoaSfw2vqZPmtiaBw9ZOTw9Szds26aagNvohTVdJRTARUlTMwNZJjhkcc49arDpNahdPeLJYI3Oiha1sso7HlxAbn2ZK83SD0lRaZsVjv8AFMY92KKi6ljeDsNLsj2lTlTikynVxVajXr1KK\\/blv6\\/\\/AKJBtu15qE0Yt5pRarZVEtGJd6SZo473LgCvrdKDVFq2XU9fJqFtPb2UsTYaWmg3SQcDDnEnv7FTm1O4Pttl0nUEz1NwuNAZ5Jqp5Lg0EtDQDyxgK1NvGr47Pso0xZ4ZwyurqenkLGEZDA1pJI54ymSzSRVlUlUlXq1W9I6a9p30DbrfRbP7lqC8TVb2xzkR00dQY2yPAwAe9cxV09y0reNUXqofCJN2C3MbIW7pHDGfzsAKs9TXWqpdkGl7TSmSaWcur62RmXdWxxaGb+OQJ7+asHZxbtKybOLLc9S1z7rJTEuhtUkox128cARg8XHA55KiS0zMmhN5o0oO3k9rWvPnrbTbmeC7SyxXGxCR7Y7iaVplfuje4k8SP8H9S4sWpLJcrrVV9sukL2Np5H+DFx63dxjDs+s8VF7nPX1u065VV8jbFVxU0jhEG4EbREQ1uOzG8onbLTFRQ32oYWtmMkMJHAEM4uz7CcfXhVKknCvCmuZ6Xh3C6GK4JjeJVm26Mkkls7Kzv\\/JeWmKiW32iauidubj3yN48CQ3d\\/En8FPNjdv61lxu07AZnyhgeeecZJ\\/FUzdLgTou1w290kNLEGxzSPG6ZZcFxDR2tGOfrWxGyigdQ6ItvW5dLO0zPceZJPD8Fop0JU5VKknrJ\\/JWt\\/JQwlZV61GmtqcO9tk6byC7ro3kF3V09IEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREB8ZHYJHrwFqdtft4\\/rjNHwRx5dXup3n\\/NkOc93AFXVtv1ZddI6MqaqwQufVzPbD1wY5\\/g7XEAyYbxOM9i1+0psBvm0mtqb\\/AH+\\/3ugp2tHi6sqgBUSHiS8NzljMngM5WdO0W22cHiaeIy0IQzNNPuZ6ul1pW4U93s+qKOJ8lFu9TO5mXbjm+c3IHZzXGvNRx7eqTRumtG79U2l3Kq7yFhZHTgAN4uPbwPBeDUuxXa1opss+nNQVN+t7MksFQS4tA7Y35B7e1QaDbjqS30b7LfbbS4BJkEcfgkx9uOB9y3JOUdNWjm3pLEyWIvThO2bRy9r0LK25aVt+tK6zxaVuEAfa6QUsrZt5se6OIwQDk5Xzq9Ix6ioMallkuFRNGwS1bfybo9wYa2IYxu8+YUTs+17TTQ0VNNcaPA+a0NlBPtGCpJ5V9HyMyK+sDscjRu4fiqf\\/AKlWUlY9xRj+Ec7qOrfMtVK6T9drH1pZLpoq31tvsFsoau1VkbW1DLg5z5J2NHAFwPAAcgAAu2zraBpqzX6dk+iIbdWwRGaaogkdIxmCOI3jwzwwondtf2GbJgq7jUZyQwQBgI9rjy+pY6nvMl7ibUzwtt1koXBz9w5dUO47rC784+wYC0qFeLzN2it7nUxOM\\/DdajHBcOoKriJaQyqWl+bb7yVas1vddcbTKmmoIo7dbw5tOR1bd95GMlzsZ457+wKIXdjqaV9x2f19dJcBIyJ8MsMe7Mx53eAyccSPne1Y2t1I6kq3VtOGtqet61zg44397P7APYphsjlvG0jU0tvtVip6O3bwfcKxtTK2PdBGQG9rj3ZwqFLo6kpKd83J+o9hx7CcS4Nh8PLARh0KX9WMkvKdlq+3W5PLdb6\\/aReLHaQ0ugtkTBXyNwGh\\/AvwRw7Bwwr3telLlQarfcW3D\\/yS2mZDFSgngWgjPcs9YdO27T9GyltVNFTRAcRG3G8e896y4YByyF1oxUIqMdkfJKWGtVnXqfuk76aL2L1Lkct4gZ7l3XAGAFysi+EREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAXBIaCTwA4lcrhwBa7PLCA43294QSNPJwUI1vtDt+gzRtucFRUGq3t0QBpxu455I71EXdICwtcd223N3acNi\\/a9c+rxDC0ajp1JpNe05lXieEoTdOdRKS3Wt9fYmXKXtHMrgyMHNwVb6V2u2jVl1jt1DQV0M8jS4OmYzdAHrDiuaHXVVVbS67TTqZgpqePebLvkuPBp5f5yfmGHyxkpXUnZe3Un8xw1oyUrqTyq192vYiyQQRkclyukXzV3XQR0giIgBOOa6GVjcZPNdKuZtPTSSvGWsG8fqUP0Zr+g13FUvtcVREKd4a5soAJz7PYtEq9OFSNNvynsu00yrU4TjBvV7LtJhIxswILQ9p7COC4MYA5YC7wODogRxGT+tYbWd6k07pa6XSCNsslJCZGsceBOQsqk406bnJ6JXFSUKcHUnslf3Iyx3cDioPrvZdYNdUm7cbdTvqhncm6oBw4YwSsjoTUU2qNNUlyq4mwySl4LWkkcHEdvsUqaOCijVjXhGpT2epqpzp4qlGoleLSautNddjSHVvR6i07FPNNNX0NOHea7qRVMx6iPOCrWTSdlgJzqmmdgcvBZN73ZX6R1EEU8RimY18Z5tcMg\\/UoXdNkeiLy98lx01bXvdzcIdwn6wQtkqldfsl3lqhw\\/8PzlfF0JL\\/RKy7ndfM0Pd8nbKWyRz1N5kbx6t0fUwnHeTlxHuWNr9Q1uo6uKCjidIxh\\/I0lI0ubH7Gj9a3nOwTZtAx73aVpHhoJxl5+rG9xXXZmzRVxqK+LSOmqe0uoHBkhNK1pOTwwck\\/mrmV3VqzjCvUV3svYtT1nD+Nfh78PSiuG4W1WWzk05O2r2v\\/BrZs56Oep9aTw1OpYJdP2YnLt4DrXgdgb2A963I0foy06JstPa9P0jaaliHHgN557XOPaVn2t3eXLC+o5BXaNCNJdrOfxXjeN4zO9eWi2S2R1a0h2ezC7oisHEOMjvXG+0HGRlY65XektEfW3Kpipoi\\/dD5Xhgzx4ZPsX3ZM2ZjJInNfG8ea5pyD61gpJytz8THMrtc0eveHeuViG3qgNy8Wiri8O3d7qd8b+MZzjmssOQyohLMFKMtnscoiLYZBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAXV\\/zHY48Cuy4d80+xAa\\/9IRzm1+mt07p3pM4P9\\/HxV1w0VNHC3ELC3dH5gVKdIoujqtOvjAEv5bcJA+dvR4z9azbKDa4Wfk6q2BvZ\\/axw\\/0V5JV+gx+I\\/pSn+39qvy53a+h5GOI6vxHE\\/wBGU75f2q\\/LndotaGmhbh7IWtdnmGgH8FTtlA8vt7\\/yc\\/7ManehqTWEBrXa5mppQdzwbqN3zee9nAHqUEsxHl+vX+IP+wxWMdNTWFllcb1Fo0k9nuloWMfPpFhZZXG9SOjsns+S0LR1Hqei0rbpK26T9TC3AaOGXuxyHeVXJ27EQ+FfJu6eAcMTjd5d+CFj9e0\\/yp2t2ixV5LrdFGHmL+McEk+7AVxdSw07aVjWhu7utbjhw7PwWyNbFYyvVjRnkjB22Tu+d78lobI1cZjcRVVCpkjTeXZO73d77JXS01Z4tOatodU2ttfaZxLHye0Y3mnHIjsKi972vW\\/T+pK20XKnmY2mj3+vDmFrjuh26BzzxwoXoYHSm1a82OjIbQzhzwzngtBLQP8ASK+FZQUt326yxV8IniDo5GsPLeETCCfeqc+JYqeGpuFlPPkfZzu\\/oylU4ni54am6bSn0mSXNXV7\\/AMMn+jtpJ1g64sktdTRQ0sIeHSlpEoO9ywP71fbZzqq26qoqye0Ws2qOKfcc0BmXkjOfNUsq4erop8NAxG7JHsKqPYC\\/q7Bdc\\/SW\\/wC7arrnXoYvD0ak1Jyz3drd3Z2F91cRQxeHoVJqd1O7tZu21uz3Ev1ttMoNFVEVG5stbXSkFlNBjLQe89nf3qC6p2tR3\\/S13tdfa660VFTSubF4QwbshxnAOBx4LrsxoBqDaFqO9VxD56Od4i4kYDnObn\\/RYFO9qlJDLoO9GqhEjoqcvjJBOCCCOP1KlKtjMbhauIhUUY+UlFpNWV07ve7+RRlVxuMw1WvGajHykllurK6bbve7+R8dj39wduyd0B0uM\\/4xy+GodsFJarnJbbNb6u+VcfGRtJgtZw7TxX32QgSbP7ex581xmzw75HZWBo7\\/AKK2dXGtoLDSV1bXzEOqWUrDMQeYGfr7FspV50sBhstRQTSu3ZvbZL69hshWnS4fh8tRQTjFNtJvbaK7foZSwbYaO7XSO13a3VllrZPmCoxh3sPBWXkPDTnLcZK1p2s6sh1NBbZ4LPcbfPBOMSVlPuZHcDlbGW52\\/QwHPzo25VnhmNniJ1KUp58lrSta9+1FnheNniKlWlKamoWtK1r37UfSrAFLMRw\\/JuVKdHsZuOqgc46yPt9b1dlWQaScDn1bv1Kk+j4d25aqz+kj\\/W9TjNeI4X\\/y\\/wDiTjP+5YX\\/AMv\\/AIl7hgHL9ax9wucNrpJ6qtnbBBCCXPeQAAF798ev3FUxt\\/r3tstBb2OLG1VSS47vY0H9uF0MfieqYadVK7S0Xr5fU6OPxPUsLOsldpaL18vqeibboyWaUWfT9xuVPE4h00WN0+zgVLdGbRLfrNkjaQS0tVC4CWmnAa8fV2hZCxWynslopaOki6uCCJrSG+z45VVaxpotPbW9OXK3AxGvcw1I\\/jlzxGT7cOb\\/AKK5VSrjcFGFarNTTaUla1r6aNa6N89zj1K+NwUYVqtRSTazK1rKWmjWujfPcxu2jVsl2hnsslprKYUlaMVkoaIpA3PzT2kqVaX2lSnT72HTtyDLdRteHOA\\/LYc0YZjmfO\\/BdNv+BpKj7f7Nbz7PNKsLS7g3TVqJ5Cmj5+wLRTpV\\/wA0rf1f7Y30Xrt\\/BppUq74rXSq\\/2x5LbW3st28zX5utnt2n\\/KHxLXdd1Bb4EG5l+YBngDw+pbA2O\\/yXSzx3Kphlt8bmb74qgAOjHrVWj\\/8AkCc8f7GP+6Cku2i5yUGh6lsJLHVUjYd4djc5P4BasDVqYOlia9Wd1GUrqyV2rfXQwwFWeDo4qvVndRlNtWSu1Z39XrseK4bb6ZtfPTWK0V95bA7D5YG+YfYcHKkGkNplBrB88FM2ajroBmSmmZhw9fLjhV3ozalp\\/S2nqGhZQXIObCDK5sTSHuPN3F2TxWBl1RRXPadZbxpylqaYTTMjqxLEMuBOHHgTjzce5aocUnGVOUqyk20nBK1r9jtd2vrd8uwq0+NTjKnOWIjJyaTgo2av2aa2vrr6y29X7UKbSN+pLVWQyuFRB1pnaW7rBkjkcE8Qsfp7a+NRXOppKK01fUxwSSx1DiA2TcI4DhzOe9Qza1RQ1+1DTVLWx9ZDURwskYe0GYghXnBSRU7dyniETGABoA7l06FTGYnF1oKoowhK1rXb0XM7FCpjMTi6sFUUYQla1rt6LmRvQm0CHXNNVSwQTUclLKI5Ypd0n5uc8Ozs9oK51xtBh0TFRunpZqySqlMbI4nNaRw5ne9yr7SnWaG2r3KyzMLKO7ZkgPzsjznDl\\/nD\\/N9i7X8P13tXt9rAIorK0TykcN52Wv8A1lo960R4hiHhMt102bJ776\\/+3yvmV1xHE9TS06bPkt679n+nyvmXbRTuqKeOR4LHOY1xaccMjOOC9C+MB+cAN0Ds96+y9Qtj1K2CIikkIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAuHfNd7FyiBlA9IjhV6ZJ44dL\\/txq+af+1hYm\\/aQsup3U7r7QtrDT56rMj27uSCfmkfxQs01oaMNGAubh8LOliq1ZtWna3uVtTl4fCTpYytXb0nlt7k0794f80qjbOP\\/AE\\/XjkMwnt\\/vGK8yMjBWHi0raIb1LeYqJrbnKMPn33ZIwByzjsHYmNws8TKk4teRJSfsV\\/EnHYWeKlRcWvImpP2K5U+1GCr0trW2a1p4xPSQhkU7N7G6ePM9xBUybtP0r4rNwZdItw8dzB389oA5qbVVBTV0L4ayBk8Ugw5kg3gR7FE\\/JRo91X4SbJA53cXO3fdnCpyweLoVqk8K42m72lfR2s2rLW+mhUlhMXh61SphXG03e0r6O1m00uemhXmzCjqdU6wumsqmJ0NK57o6YOHz2kEdvqwujABt9mAPDzcfZMV5U9DTUsLIaaFsMTBhrGDAAWNGkbKL2b0KBguhxmo33ZPADlnHIDsWv8rnGjShGV2p52+3tt\\/BqfCZxpUoKV2pqcm+fbY9lcf7AqT\\/AM279Sp\\/YEzesd1B4DwoD18GN+Cut8LJI3Me3LHDBGeaxVj0taNNxSxWSibRxyu3nhr3HJxjPEnsCv1sJOrjaNdNWgpX7dbWOhXwk6uMo101aGa\\/vKSst1bss2iXelvjCyhujzJHUAHDRvFwPD\\/Cws7tH2iWCo0lcbdR1zK2uroSyFsXn4HDJJHIAZPHuVn3nS1n1BGYrzQRVjM5HWZyPYc5H1LG0GzjS9vhmhprRC1k7S2QkkuIxjnnK5q4fjaMJ4ejKOR3s3e6Ur3Wmj1e7OYuH46jTqYejOOSV7N3us17rTR6vdkc2ViSXZjTimP5Ux1AYQfzt9+PxUG2PalsunKW5UmoZG0V3M2\\/JJOzLnZHEA+3Kvm2Wehs1DFRWynbT0sWdyNpJAycnmc8ysHeNnemr7VeEXG1xST8i8EtJ9pBC2Ph+JpwoSpSTlTVtb2d1Z+\\/3GcuHYmnDDypSTnSjbW9ndJPbZ6aMo\\/bBre1akZRUdkc6qipp9+SpwQ3JGN0ZHHHNbD2oh1upSORib+pY12gNMyW9lvdZ6bwNj99sYBHnYxnOc8lIIKaKnhjhhZuRxtDWNyeAHJWMHhMTTxFWvXkm5pbcrcv9yxgsHiaOJq168k3O23K3L\\/fmeau4Uk2P4jv1LX7Y3qmz6auGozfK6OjE0rNwyD52C7l71sY6Jj2lrhkEYIUROyrRzpHyOsUBe\\/i4l7+P8pRjsLiKtelWoWvC+9+atyGPwmJrYilXoNXhfe9tVbkfLyqaP8ATlKontitrtUaPpbxZsVEdK7whpb+dC4fOH1cVMfJVo70DTf6T\\/ipJSWqjoKSKlpIRFTwxiONgccNaOQ5pLC4rGUZ0cVlUZK3k3v7deyysJ4XFYyjUoYvLlkreTe+++vZZWIFpralYLpao5qutho54mDropnbpDsYJGeYyoXPW+Ujahbaq0s6y02ctJqOx5a4v4D1kAfUrNrtmGlLjUmeps8PWEkkxuczJzniAQFnrVp+2WWnEFro4qSIfmxjGfWe8rTLB43FKNLEyWRNPS93Z3V9NPWaZYPHYpQp4mcckWnpe8rbX2S9e+pWO3iGSXRtNLGzLGVcbnd+CCOX1qTaC1RabzZrdR0VWyWqipR1kYJ3mhuATg\\/UpfW2ujuFNLT11OyogkaWvY\\/iCMdywtg0Hp\\/TVS+qstA2nnewsLw9x804yOJ9QVmWFrRx3WIWcZJJp7q3Zpr7yzLCV4Y94im04ySTT3Vr7aa+8qW7XSm0\\/t1FZdZRT07qbAkPLJZj9imu0e3R620HO6xzNqy0iaMsd87d5496lV90XYtSlrrzb46l7B5rySHD6wVkLZZaGz0EVDbYBT0sTd1jGuPAe9aKfDqi6elNro6jb5313\\/5cr0+HVF09GpZ06jk\\/WnK3utoVbs82jWupsdFb7rUMobhRxCJ7JW7odu8Mhx9nJZ+37SrPdNTNstnZNWPc0mSoh4sjI71l7vs20ve5uuuFohfMTlz25aXHvOCMrJ2XSdm09EY7Pb4aQEYcWA7zvaeZWVCjxGnlpynFxXPW7XseifruZ4ehxOko0pzjlXOzu0vU9E\\/YyntqJ\\/8AS3pIEgcIP98VebSQDjHMrGXHSNlu10pbncaFs9dShohlMjgWYdvDgDjmsnO1jG7xd1YAJz3etWMLhZ4erXqStabuu6xawuFnh61apJq05XXwpfwVBtloZqGos2qqFuZ7bM0SccZaSCPq5j619NjNumuEt61VXN3JbrUOEbTxwwOyePt4f5q821DWdtutl8RWOphuNfXTNi3IXb+PO7ccuSsrSlk8Qact1uecmnhaxx73Y84+\\/K5FGhTrcVlWpyvGKT02z2yv32ucejh6dfi8qtOV4xSemqz2tfTS9rmei7R6gvovnGMZ+pfReqR6paIIiKSQiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIDrvt71yCDyWvtVtguGzqv2iWHXBmrK62Dw\\/Tszt1pucFQ\\/chp4wAN6SORzY3YDvnA9uFlLftKuGzS1WfSurm3vaHrwUQrbkLNQtkdDG57sOcMtDWjiG9rt0nCAu9FXNt206cvN70fa7X4RUyaqpaqpo5Gs4ReDhvWxyDm14L8FvYQQsBcOkhpy30lfUG13irfSaml014PS0wkllq44myHdbniDvABAXKih1x2iUln2c1Ot7vbLlQ0dLb3V09FNCBVRsaMlpZng7hyyozLt2t7LPR1seltUTVtdPLFR2tlABVzMja0ulEZcMR5eBvE80Ba6KrJNvFidpa33q22u9XOquNXJRU9npqQOrjURgukjdGThpaG5OTyS0beLBeX6diioLrS1V6u81oFNVU3VSU1TFEZHNkaTwGG8CM5QFpFwHNA4HkVTe0LaV18V7tVgkrKC56f1JYaOskyGCRlVVQHDT2tMbyDy5rybNdsN51ftk2iaRuNjrKK2WHwXwSSSBrSzfac9YQ453+Dmf3oKAu\\/IXKqa\\/a+prBtgrbddL1WwW+g0a68z0PgbDTNjZPKHz9dnf38MA3MYwAc8V7dDbZ6DWl9bZZNO6j0\\/WS0xq6U3ahELKmEY89jg49+cHB9SAsveGcduMrnOVR2u9pFbonbPQUfgt8vtFUaYkljtNqg64yVAqf7Zu8MEMa4bxOOztCz0m3aws0nZr5Bb7rV1V4llp6OzQU7TXOmic5ssZjLgAWFhzk8AgLTRUzcukppi1Wa311XbL34ZVXU2iS1MpA+tpqzcLxFJEHcCQ3gQSDkYXpuW3+328U8Uek9VXC4+BMra6go6Bsk9vifnd68b4DXYGd0EnBBwgLdReGy3ik1BaKG62uUTUVdAyeB4\\/OY4Aj8CvcgCIiAL5zRiZhY9u81wIK+iKGk1ZkNX0IdaNmunbHXmvt1tZFV5JbK47xaTxOM8ualYYQMBvADgvsi1U6NOistOKS30VjVSo0qEctOKit9EfOPe3nbzcDhhfREW1aG4IiKQEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAVDtV0LLqraFsoucVqNfBZLxUVNXMHACnZ4Odwu7x1jYzjvC8tTQ37Qu1rVepodP1uobFqS32+MOt7o3TU1RT9aN1zHvb5jmyA7wzukHPNXQiA1PsWzLVmgb\\/oLVs1lqbsaSuv9XdqG3uZLNT+MJGvYxrXOaHbpaA7B5g8V8dEbPtXi7sudz0\\/U24y7Vaq9yQyvY50VFJSRtbId1xHNuFtsiAr7bRZKzUGyTWVps1K+sr6y0TwU1O08ZHuZwAz25UG2vaCq71q7TV\\/8X6guFpprXPQVlPp+6Po6qBznxva8bkjDI3MZaW73cr6RAa4v2cRUmlLZBFoa\\/m2vvFRcaxvjx013glczcbOyTrRvbw4OYXHA7CsazT+0aZ2mtQX+23G60um9Wy1VvopXwG5G0vpuqb1gaQx8oc8nBdnHMraBEBq\\/wDJTVWoLrtFutTpqvtsV31TpyrooKjcMj4KaSHrXkNcQAGsJIBPLhlTPQml73p3pA7ULvcLXN4m1NT2yWhr4y0x5p4XRyMfx3g7LsgEcge5XaiAoLXWjdQ1+2+83y2WKO62yfZ2+1sFS7cgnqDVSuNO5wORvMcPZkcV9dm1r1JZdY22ksdu1NaNERUMor6XUFXHUiOo83qm0zy58m6OOcndwBgBXwiArSp0\\/cJdu9HffBHutUelZKU1WRutmNU14ZjnnAz9RVMai2Q6hul00zf6i3XuWjtl+1A+vprVc3UVd1FVVPdFLE9j2F3Aglu8OBIW2SIDViDZTLRXnRly0vpm\\/wBBHJrSG4XJ15uRrap8EdM9onkLpHFnE4wXE4CyOsNnFc3atqy9XK0avulnvUVJLRy6av8ALRlsscIidFNE2WMEHcBD+PBxHLlssiAjugrFTaZ0dZrRQUUttp6OmbGylmqTUPhHPdMhzvkZ55UiREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBEXV+ccEAMjW53jjAyc9y6QVMVSzfp5GysyQHMcHA4ODxHsWtnSo2e6i1FpXVN\\/GuLlaNO2qyPmis1vDY+vqG7xL5ZDxLC0tbujHzc54qQdDpoPR10We0wzcc\\/8APPQF8IiIAiIgCIiAIiIAiIgCIiALo6QNODld18Hty8+rBUN2B1fXQxAmZ3VNH5zyAPeuYq2Ccb1PI2Zv8Zjg4KnNtDd6ssYvLnnTPWYrWxHzs9nt5rG7MIaWLWNxGinSM091ABbITgyEcDjGe5cGfFXHGdWy80t9btX\\/AG9nvOBPi2XG9Wy80t9btXvbs9dy8ZrrR08jY56iOOR3JjngE\\/USvRHK2Q+b3ZWv+odncVssF9v2t601l4dvyUssUrwIzzY0D\\/CIz6lZuyl1a\\/RNofdHPdM+FxBf87c3ju59eMLfhsfVq4hUKlPK2s297K9tey5vw2Pq1cT0FWnlds26bSvbyuxvdW5E3REXYOwEREAREQBERAEREAJwMleerr6WgiMtdUQ00Q\\/PlkDB7yvu75pzy7Vpl0v4LL5Ttn9RtblrG7LfBKplW2je4P8AC+JG8GeeWk9Xy7EBuPTVkFZGJKSWOeMnAfG8OafrC+dZdKO3gOrqmKmaeTpZAwH6yQFpf0Kp6ejvG1Ov0ZPVDZbS1X\\/k1lU\\/MgcN52Q08QNzHt7eOVS8G0bSe1i\\/6h1ttqodW6moKSvxQUdnjc2jttMCMPkcCBvYLeGe\\/KA\\/UJrg4ZHdlCcLA6J1LatY6VtV+01MZ7TX07ZaV7hglnLiOwjGD7FBektri5bONiWrdSafkbDc6WCKKnkcze6t0szIt4DvAkJHrA58kBZjLxb5Kg00dbTvqBwMTZWl+e7dBz+C+1RVwUkfWVUrIYxzfI4NaPaSvzp1PsTsuhOjXYts9hqbjDtBpxR3OSvdVlwe+aVjSN0jGMP5DHM5yrH241E21Ha5sS2f6iqJ\\/k1qK2C43SnppDEZnljnY3hxDcsHAd5QG5tJcKWvZ1lDURVMf8eJ4e33j2L0rTHY9p+m2M9La+bO9HS1EGkq+xNrGUc87ptyUNY7IJ48y7nngtzkAREQBERAEREAREQBERAEREAREQBERAEREBXO3uhqblsY1xRW2mmrKyos88cEEEZfJI8tOGtaOJPqCjfRPtFwsWwTSFBe6GqtldDFL1tNVwuhkZmZxGWuAIyCDx71dDm7yBuAAOA9SA7IiIAiIgCIiAIiIAiIgCIiAL4yEB3HmThfZfN8ZLsjHqyoauQ720Kj2mWa5jVNlvjLfLe7TRsLZaCMb+XHPnhnEHmOxeLSVuuF12gyX6Cyy6etTIDG+F7OpMrsHBLQAO0c+5XLJE9zcN3c57\\/3LkQEY4tP7Vxp8LjLE9Nmdr5rWW9u3f3bHGnwuM8T0+ZrXNbTdKy1392xrxdrzc7\\/AKoirdR6cvUtrt73eDUUFG8skIOQ5+9wPADsV1aPu7bzQdcy3VdsY0ljYaqIscADjgO5Zs07j\\/FHHvX0jjLD2Yx2LZhMFUw1SU3UzZt7pX9Wu+nJG3CYKphqsqjqOWbe6V\\/VrvZdh9URF1jqhERAEREAREQBERAcPGWlan7frHfrDt30jtFk0bW6\\/wBJ26zSUMttpKcVD4Zy556wROBBJ6xvED83nwW2K4Lc80Bp50ddn+pbttH2kawuGma3QukdSwmGls9SzqXbxG7vCIBob2nOO0hQ\\/STdd7C9Baw2T1GzW8alNxkqorVdLfT9ZTStmZu70rgMjAIPHPLC3z3cLgszjkgK06PeiLhs42N6T0xft0XOgpHeEta\\/eDHvkfIWg9oG\\/j6l9tu2zmTavsp1NpKlm6iquNOw07ySGiWORsjAfUXMAPqVjAYXKA0FvNXtJ17sXtOws7Nb1bbwzwWgrLvURhtCyGGVrhI2TGD\\/AGsZx+1WPtt2fan0ltC2U7RtKWSq1TSaPoRb7hQ0bd6ofGGkBzG9pw934LbHdXO7nmgNTdjth1PtC6Rd52t6g0tcdJWVlnbb7fTXNhZUSOw1pcWniPmu9WMLbNdWs3eAAAXZAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBEXB5H2IDq6VrRk5x7F1ZUMkBLScZwvHcI6t9vnbbnsjqjG4QukBLWvxwJ9WVXjbPtNx\\/wzaRx\\/QOP7FTrYiVJK0HL2K\\/8AKKlavKi1aDlfsV\\/5RaPWN706xveqw8T7TfTVp+wd8E8T7TfTVp+wd8FW67U9DP4V9xo67L0M+5fcWf1je9Osb3qsPE+0301afsHfBPE+0301afsHfBOu1PQz+FfcOuy9DPuX3Fn9Y3vTrG96rDxPtN9NWn7B3wTxPtN9NWn7B3wTrtT0M\\/hX3DrsvQz7l9xZ\\/WN706xveqw8T7TfTVp+wd8E8T7TfTVp+wd8E67U9DP4V9w67L0M+5fcWf1je9Osb3qsPE+0301afsHfBPE+0301afsHfBOu1PQz+FfcOuy9DPuX3Fn9Y3vTrG96rDxPtN9NWn7B3wTxPtN9NWn7B3wTrtT0M\\/hX3DrsvQz7l9xZ\\/WN706xveqw8T7TfTVp+wd8E8T7TfTVp+wd8E67U9DP4V9w67L0M+5fcWf1je9Osb3qsPE+0301afsHfBPE+0301afsHfBOu1PQz+FfcOuy9DPuX3Fn9Y3vTrG96rDxPtN9NWn7B3wTxPtN9NWn7B3wTrtT0M\\/hX3DrsvQz7l9xZ\\/WN706xveqw8T7TfTVp+wd8E8T7TfTVp+wd8E67U9DP4V9w67L0M+5fcWf1je9Osb3qsPE+0301afsHfBPE+0301afsHfBOu1PQz+FfcOuy9DPuX3Fn9Y3vTrG96rDxPtN9NWn7B3wTxPtN9NWn7B3wTrtT0M\\/hX3DrsvQz7l9xZ\\/WN706xveqw8T7TfTVp+wd8E8T7TfTVp+wd8E67U9DP4V9w67L0M+5fcWf1je9Osb3qsPE+0301afsHfBPE+0301afsHfBOu1PQz+FfcOuy9DPuX3Fn9Y3vTrG96rDxPtN9NWn7B3wTxPtN9NWn7B3wTrtT0M\\/hX3DrsvQz7l9xZ\\/WN706xveqw8T7TfTVp+wd8E8T7TfTVp+wd8E67U9DP4V9w67L0M+5fcWf1je9Osb3qsPE+0301afsHfBPE+0301afsHfBOu1PQz+FfcOuy9DPuX3Fn9Y3vTrG96rDxPtN9NWn7B3wTxPtN9NWn7B3wTrtT0M\\/hX3DrsvQz7l9xZ\\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\\/gVYYmE5KK5tr3q\\/gSjDST3glcFowDn1ZVcx6vr6iSst0BhbXuvE1FBI+MljI2sa8uIzxw1x7RkrPaXu1xfeK203rqJJoYWzwTQx7gfGTjiMnBB\\/BY08VTqWS5\\/XX56GNPFQqWS5+rT\\/wCyTY7nc8Z7l2ZxGAOHtX3RXNe0tW9Z8SOIXBbw7uHIcF90UWfaSfDd5cFwWgYw0fsXoRTb1ix8gBjuX1RFICIiEhF1fndOOao2j1jtI1XS3XUWiqezSWqkuslHQ2mdrmzXCGGUxSyOm3gIn7zXboxjAGTxQF6IqSk1lrXWdz1k7ZxPaaCk0vUutxiudK+U1dcyJkkjN9r29XGBIxu8AckEjglPrzUmu6nTB0rdqLS8Fy05Jd5hV0HhX5USMZ1Zd1jAAN5+cZ5ZQF2oqLsmt9Y60pdHMtl4tViqq+0VtZWyvoDUMlfBNHECxrntIY7eLuZOCudAbVr7qiTRbavxdM253G8UVXUUjD1c\\/gm\\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\\/MfrXx0ptIterK+Sjp46mjrYm7zoKiPddu9\\/AkFZTUEHVxOms1Lb5L8xoNO6pAGBnjx+cBjPJVhpQ1MO1Cudq\\/dZfZaXNO2nOYerx2ducDtXCr4nFUcXCN1lk7ft0Wj3lffTaxwMRisXh8ZBZlkk7ft0WnOV99NrEouW2Sy26uqqVkFdWClkLKiaGEFkRBxxOfUpzp+90uobZTXG3P6ymqGbzHYxwVM7LWMk0Zrbr2hxmlnEnDiR1WOfsyphsNc52h4Gu5MnmDfZvlauH43EVqlPpWrTjJpWtazt7\\/boauHY7EYirTdVpxqRckrWtaVvf7dCy0RF6Q9KEREAREQBERAEREAXgvN2pbFbKu5XKYU9FSQulmkP5rWjJXud80rUPpWbR9PXjVuntkupb7Hp2xVTm3HUNe9r8iFhLoqZoaDkyEcc8OSAuPYpt9sO3OjvdVpikr6OK0zsikNWxnn77S5rm7rjww3PHHNQa+9NXQllut0pYbXqO6UFqnEFddKOgD6aF29u5Lt7lntwqR6G+q9O2yj2yWC118LKuvnnqbPSnLXTUzI5cOAI5BpapV0ZaWm\\/rLtaukjjdJPS3g1GSHF2IXYJ9yA3E0\\/faHU1mobvZ5\\/CKCugbPBJjG8xwyDg8Qvvc7jBaaKorq+ZlPSU7DJLI\\/gGNAySfqBVQ9Eh75OjpoEy5LhQvaCe4TSAfhhW\\/cbdTXWiqqG4QsqaSqifDPFIMtexzcOaR3EfrQFLaW6WeznXG0O06J0hWVd2uNydKGVEdOWQM6uJ8hy52CeDDjAPYrqrq6G30c9XVyNhp4I3SSPdya0DJP1AFad6psVq0309NlVBp+20dqoxpiV3UUkDYmZ3LgN7DRjPADPqUg6XO1mgt9dYtllVdGWOn1Qxsl7ujt7+w7f1h3t3dz5z+re1AWVsf6SOl9teoNQ2fSVLcGOsoa6SoqGMbHM0vLQWYcXdmeICuRfn90Nr\\/ovT23vaPZtPXSAWy5CGmsAcC01bI3OJ3QQOO6M8cL9AUAREQBERAEREAREQBERAEREAREQBERAFw4ZGOS5RAUPtU6Nw1vraDW2i9X3DQmrGwCCaso4RM2dg4DeYXN4gYGc8gFktiewOl2T196vl0vlXqvVl7dmvu9XEGPkbnO6G5OBkZ5nsHYrmwuA0DkAPqQHKIiAIiIAiIgCIiAIiIAiIgC6GPLnEHGV3RAQHWOzlmobjS3eguc9rutM0MZMwbwLePAtyO9fDS2zbxNeZLzdbtPeLm6PqxLIzdDW9wGSVYjuXcumPrXPlgMNKt0zj5V789+217fIoPAYd1umy+Ve\\/Pftte3yKmr9j8orLkbPqCqtlBcpC6ppWRbzTngQDkY4cORVhaWsFPpmz0troiTBTswHEcXEnJJWWwOOQuzRg59SyoYLD4ebnTjZv28\\/p7hQwOHw03OnGz259t\\/qd0RFeL4REQBERAEREAREQA8QopfNm+jtRXB9w1BpSx3evewMdUVtuhmkLRyG85pPDKlaYQFC7DOjZaNjl11RcvCaG+VN3rXy0zm2oQOoIXb35Fp33ZaQ4DgG5xyUKuXQ3r4XXy3aN2m3fTukb5O6StskdIHs3XfPa2QPGAeP5pzy9a2uLQ4YcAfamAeYCAwmjtL0GitMWrT1lYWUFspmU8DXc91o7fWeaziAAcuCICnNQbD3X\\/pB6V2sG+inFhtb7eLWKLe64OFQN\\/rt8bvGp5bh+b68ifX7Z\\/pPVNYyt1Rpiy3urjjETJq+3RVD2sBJ3Q57SQMuJx6ypJgZzjiucIChNmHRksuzXafqjWsM1vrBdpQ+3UEdqbA218XZETw8jiHEcGtV9pgIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiLg8igPnNUw00TpaiWOGJgLnPe4NaAOZJKxZ1bp9pw6+2sH11sfxXsq6WGtpJKWqY2SCZpY9ruRaeBCig2WaTAwbLTn6v3qlWnibroVFrndv+CliJYpNdAovtu2vomZ\\/wCV+nvT1r++x\\/FPlfp709a\\/vsfxUfOy7SXZZKf3fvTyV6U9CU3uPxVdz4iv7Yd8vAq5+Jv+yHfLwJB8r9PenrX99j+KfK\\/T3p61\\/fY\\/io\\/5K9KehKb3H4p5K9KehKb3H4qM\\/EvMh3y8Cc\\/E\\/Mh8UvAkHyv096etf32P4p8r9PenrX99j+Kj\\/kr0p6Epvcfinkr0p6EpvcfimfiXmQ75eAz8T8yHxS8CQfK\\/T3p61\\/fY\\/inyv096etf32P4qP+SvSnoSm9x+KeSvSnoSm9x+KZ+JeZDvl4DPxPzIfFLwJB8r9PenrX99j+KfK\\/T3p61\\/fY\\/io\\/5K9KehKb3H4p5K9KehKb3H4pn4l5kO+XgM\\/E\\/Mh8UvAkHyv096etf32P4p8r9PenrX99j+Kj\\/kr0p6Epvcfinkr0p6EpvcfimfiXmQ75eAz8T8yHxS8CQfK\\/T3p61\\/fY\\/inyv096etf32P4qP+SvSnoSm9x+KeSvSnoSm9x+KZ+JeZDvl4DPxPzIfFLwJB8r9PenrX99j+KfK\\/T3p61\\/fY\\/io\\/5K9KehKb3H4p5K9KehKb3H4pn4l5kO+XgM\\/E\\/Mh8UvAkHyv096etf32P4p8r9PenrX99j+Kj\\/kr0p6Epvcfinkr0p6EpvcfimfiXmQ75eAz8T8yHxS8CQfK\\/T3p61\\/fY\\/inyv096etf32P4qP+SvSnoSm9x+KeSvSnoSm9x+KZ+JeZDvl4DPxPzIfFLwJB8rtPenbX99j+K4+V+ngM+PrXj\\/AC2P4qPHZjpMf8R03DtA\\/eg2Y6SJAFlpQf8AB+JTpOI+bDvn4EZ+J+ZDvn4Ei+V+nvT1r++x\\/FPlfp709a\\/vsfxUd8mOkSRizU5z27uEGy3SWMmzwHtPm8E6TiK3hDvl4E5+JeZD4peBIvlfp709a\\/vsfxT5Xae9O2v77H8VHfJjpEEDxLTOzxGG81wdmWkB86yU4Pdj96npOI+ZDvl4DPxLzId8vAkfyv096etf32P4p8r9PenrX99j+Kjnk00gSALHTEnsH\\/5XJ2YaRLt3xNTtcBn5v71GfiXKEO+XgM\\/E\\/Mh3y8CRfK\\/T3p61\\/fY\\/inyv096etf32P4qOnZbpPmLLTn1bp+K7eSzSh\\/4kpvcfinScR82HfLwGfiXmQ75eBIPlfp709a\\/vsfxT5X6e9PWv77H8VH\\/JXpT0JTe4\\/FPJXpT0JTe4\\/FM\\/EvMh3y8Bn4n5kPil4Eg+V+nvT1r++x\\/FPlfp709a\\/vsfxUf8lelPQlN7j8U8lelPQlN7j8Uz8S8yHfLwGfifmQ+KXgSD5X6e9PWv77H8U+V+nvT1r++x\\/FR\\/yV6U9CU3uPxTyV6U9CU3uPxTPxLzId8vAZ+J+ZD4peBIPlfp709a\\/vsfxT5X6e9PWv77H8VH\\/JXpT0JTe4\\/FPJXpT0JTe4\\/FM\\/EvMh3y8Bn4n5kPil4Eg+V+nvT1r++x\\/FPlfp709a\\/vsfxUf8lelPQlN7j8U8lelPQlN7j8Uz8S8yHfLwGfifmQ+KXgSD5X6e9PWv77H8V76K50NyY59urKerY07rnQyteAe44KiHkr0p22Sm9x+KkNksNt0\\/TvgtFLHSRSPL3NYMAuOMn8Fvozxjl\\/WjFL1OTfzSN9GWMcv6yil6nJv5pGYznki6tGAuyvl8IiIAiIgCIiAIiIAiIgCIiA67gxjJKq3pA7QK3Zhs3rr9ZY4314ligg61m81rnuxk8R2K1FgdX6StOuLJU2TUtG2ut1QAXxuzjIOQQewg8crXOLcGo7mqpGTg1B2fIqrYJtrtWu9JWuC93umOp98U9RBPIxkssvPLWcMg8cYCvHcCpvZ90atFbPb6y92+mnrLhFJv00tVIX9RzHmjsODz5q5ljSU1Hy9zXh+m6NKtuddwJuBdkW4snXcCbgXZEB13Am4F2RAddwJuBdkQHXcCbgXZEB13Am4F2RAddwJuBdkQHXcCbgXZMhAddwJuBC9o5uHvXO80fnD3qNAQrVPh1LerJUQXGeKllrmQvp2NbuuBDs7xwT2DkQo3qK81dNc9RGsuFRReAQsltsUYwyQiPecTwO\\/k8DxU\\/u1siuc1G6XeHglQJ2bvaQDz9XnLzXmxtvckbZZZ2wDIliZwbL\\/hHnjs9eVzq1CrLNk9vya+upy6+HqTz5Hq9fl\\/un7UeC4VhuN\\/t1tjcWGOMVk\\/VnBAGQ1p9RcfwKwthkrqW5wnUFPXsmqKmcQyeENMJG89zW7gOR5gHuUvo7K2hra6sdmeeseC53V4LWAANZw7Bx95WJOjnBxdDca7Me+6ljl89kL3NIDhnnjePPvIWFSlVupWu0+3u+j7xOjUbU93ft9Wn0feeKnFdqOW6VtLWOt8DZm0kTgOPVRuzI9vHAc45AdyAA4LGNq64eFU9NcanwGpu0NJTVJdvODN0dYWu7RkEA+1Syr051unxZ6eeppG9SIjNAPOPtyDz7frXhh0e+K3ChlrquWNjmPp39UwGAs5EANCxnRqXVk72bbvz7N18jCdCpfRN6Nt35vlutPYYe3yXKuuN+tAustPTW6qhkdK\\/zpTA+MPdHv9+cje7j38V97W6puFoqpY62tktsda90EjQeulha0DdB54Ly7B7QPWvdUaJE1uqIG11cyetla+rqAB1kzQMBruGMbvDC9Q0xVyUggkvFcSyTfieI2R9XjhgBreIxngcqIUZxd5Rb3trvflvyVvazGFGoneUW9+fJ8t+St7WdNE3GertLn1D5XjwiRrOu\\/tjG72A13r\\/ZhS8MGBnmsRZbOyz0jomOllkkeXySyZLnuPaVmRwAXQw8JQpRjPdI6OHjKNKMZ7pHG4E3AuyKwWDruBNwLsiA67gTcC7IgOu4E3AuyIDruBNwLsiA67gQMA7SuyIDgDHaT7VyiIAiIgCIiAIiIAiIgCIiAIiIByXTrBkDjk9i7O5Kn6fR+ntaag2gVetKKnrZ6WvFFFJUgONHSikheDET\\/a8mR7t4YOSePDCAt1szHkhpyf8Ax8D7kbOxxwDxxn4fqK1wlsgu2uKd9h0tZdpFLDomymGpv1Y2N\\/VulrN2YE08m857W5PBvId\\/Drc6Cq0XtLvGsbVG63UenrHamXSyUQ3oX0TjU9b1TGgAui3d9vmjeDXDGXDAGyQlafm8fZ7cH8U65ueHH2cVrdcqHTWtOjxrHUAt9tuzRHfKi3Vc9HHI+Njp5nNLS9p3TjHLuCk21HR1utr9C27Smi7BcWTX6aQ2mdjKSlmd4BU+c8iJ4yMDjuk+ooC6uubvBpOCeAz2+z3LnrWbxaHDIxkZ5LXTXGkLvVTbNqLTlBbNB3+nq7jW09HbJRJRidkJduPc1kW8x\\/EOIaDx9S+lh2tUzztK1fHTTS1Vrs9ujqbc0HrGVofVNNOO8mRwAxzBae1AbDtka\\/O6c4OOeeOcLutcejzeLhbdS3SwXdlyzdqRt6L66jlgDa8kCtijL\\/nMD3sc3nwJ4ns2OQBERAEREAREQBERAF83OGT6l9F8JM5d\\/wCOxQQz5STMDt0Y3vWujt2UYdg8ccOKr6G2Gt1Rfy+x0NzZHXMb1k72hzB1LDyLT6jwPMlerSdTFb7zqKKZ7IXyXJscTHO5\\/kWHA+rK58cRnaTjo7\\/L3WKEMQ5zScdHmXd7rfMm0TmOy1pBLDjHcR2L7wFvWEAAOxx\\/BVBTPdV3CopZcPoKvVFU2YOGWyBsTC1hz2Fw4jt4qV6Vijoda3ahoMMpG0MUj4mNDWMkL3DgAOGQ1YUMS6jjaNtbfJ8rewxo4rpXHyba2+T5W9XzJ6iIuodIIiIAiIgCIiAIiIDhzt0ZwT7F0MzW\\/OyAO\\/guzxlpBGVrPYrBpXVGzvV+oNeXKa33mO\\/17am9NeG1luMVW5kMcL+JjG4Ixujgd89\\/ADZcStOezBwc8E61uMg54Z+pa86Wsdq11d9rU+0SGOqqbXePA6GaoAL6KgbRwvikhceMZcXPeXNIJcD3KM2yR15pNB3a\\/aWi2gTHQctRIysFOXu3ZYT12ZeO+5p7OPHkgNrd8ceBH1Lr17AcHh+34rV+0WmnmtmzZ100tT68jj0xcqtlMXwzNiYZoHN3TOQDuNkbGCOPDgvvsqik6vZNUtqGSU9dXXupggbM6QU0T45HNgLjgkx4LSOQOQOACA2bEgJx\\/wCCuHStaQOZIyAOfuWt9g03ZLBs22aX2w0dLbdTzXC1tbLSsbBJWNmqY2VDZN0ZkHVSSOO9nGM9ix0FntNx2PbQtYXdzqjWNLWXeTw+UA1Nvnp5pGwRQvPnMbiOPzQfO3zn1AbQ9azAOeB5etdmuDu8e1astslXdbnfdTXWltmt4p7PRNu1BUVAhrLBK2kBeYOsa5oc\\/O\\/wLDkcytidGVFNV6WtE9unqamklpI3wy1TsyuYW5Bee045oDPIiIAiIgCIiAIiIAiIgCIiAIiIDh3EEd6i182daY1HcHV95stLV1j42xyTFpa6Vjc7rXEEbwGTwORxUqRAQ29bMdMX6shrLhbXeFQ0zKSN8FVNT7sLC4tZ+Tc0YBe7APestZ9KWuwvlfa6QRSTQRU8r3yOkc+OPe6tpLnEkN33+8rOIgI9T6JsNJpuo03SWunp7HUtmbLRxs3YyJXFzxj1lxK51No20awhpYdQUfhbKWUzQYnkhdG8tc3eDmEEHdc4fWpAiAjNp0NZLKaA2+je00D5ZKZ0tRJMWOkG68gvcTxAQaE062uuNa2zUrKm41MFVWPbHjr5oXb0T3Ac3NPEFSZEBjqmzUVbcaCvq6ZklZby91LKRxjL27rse0cD7AsiiIAiIgCIiAIiIAiIgC+bwSeXBfRFDV0DHx0DKeSpmp4w2SocHSkcN926G59zQsfUaYt1U6cz0McnXyCV+83iX4xnP1KQItTowe6uapUoT0krowfyatvgQoxQRCmDt7qwz87+N7fXzXqtVmo7QHigpmU4k4v3RxcfWe1ZJFkqUIu6RkqcE7pBERbDMIiIAiIgCIiAIiIDhwy0jvUTrtmmlLhc33Kt0\\/Q1FXJJ1spfH5ksnY97Pmud6yCVLUQEXvmz3TOpqw1d+stLXVDoxE972n8owZw14BAcOJ4HvWUjsNviuENdFRxMqYaU0kT2txuwlwduAcgMtb7llEQGDtekrRZn0jrbQxU7qSOaOAsGOrZK8Pe0eouaDj1LzUOg9P2uopZ7faoKeSkmqJ6fcyBFJOMSlrc4G8OftKkqICHWHZdpPTdXT1doskENRTb3g73udKYC4YPV75O5njyxzX0rNmulLhdXXOrsNHJWPkEsr+rwJXg5Dnt5OOe0glS1EBE73s30vqCvkuF2s1PUVszQyaUAtdK0DAa8gjeAHAA9iktLTRUkMcFNEyCCJoZHGxoa1rRyAA5YX3RAEREAREQBERAEREAREQBERAEREAREQBERAEXG8M47UBB5HKA5REQBERAEREAREQBERAEREARF1L2gkE8R6kB2RdOtZw48\\/UgmY4ZB\\/AoDui+YqI3AkE4Bwcghdmva44B4+xQmnsRdM7IiKSQiIgCIiAIiIAiIgCIThcAg8kByi4LgDg80LgBx\\/UgOUTK4LgPagOUXG8DyOUBB5IDlFwHA8jlcoAiIgCIiAIiIAiIgCIiAIiIAiIgCIiALg8lyur87pxzQGrG0LaNrvaFt4n2S7ML5Fo6K0UIq7ldzTCplcS0O3WsJaMDfb288+xZbo97VNV1ev9X7K9plRDdL\\/plomiusY3DVwktGXMHAHz2nn247FX1Xf7dsh6a2ptQa\\/q4rJYtQWVooq+oyI3ODImluRnjmIr39Hh0euulHtW2haed4XpeSlbb6WuZxjnkzDndPsjJ+tAbioiIAiIgCIiAIiIAiIgCIiALzvP5UgAesr0LoWNLiSOPtUNXIZBtUab1Dc641Fo1U+z0u4B1DaQSYdk8clw55HZ2KIaHq9R1eu6uhn1A+8W21tIqXuhbGHPOQGgD1hT7aBqNmlNMVly3S+Vjd2JmeLnHgPj9Swey3TD7JpVlRWb0lfcXmqqC7gd53Jp\\/8dq89XoqWPhCm3deVLV7f2re2r39R5yvRjPiEI027rypay2\\/tVr21eu2yINLqvU1+Op7jSXmCzR2R7y2j3OM27k8STz4Y5HJVqbOb7Vak0zQ3G4RiOomjO9u5AdhxGcHlnGVr+2Ky30arq9Y1opL2yWTweLIZxDSRhoHnedwKvHZDVVNZou3yVzN17WOZG7GN9ge4A4HqAXO4RiKtTF2lNvMpPe97Sssy\\/taWyW5z+DYirUxbUptpqT3ve0rLMv7GlsuZPURF7M9oEREAREQBERAEREBw7kVqj0ntb6joNpuz3Smmdofk6orlSV1Tcri6JsjGtZu7hc12MnLHNABHzitrnHDStd9teqNlVn2n6UotsumaSbwigmfQ325RtfSQ4J3oXA8Cc4PEHBcEB79gNqv8brneLttlZtQtTomxsayhbA2neMkuJD3dmOwe1UvcekVftqWp6wWTaFY9mGiKWvNLQ1tREZ6u4OB57mcBpweJIAyOa82wGltt82+bXW7ISI9AVFuEUTqYbtP4Q+McWN5fP6zHq9SrbZXDsl0jsY2h6c2t0ltotodHJVwBldDmr32sxC2E4yMPHHB4545CA\\/Su3zx1VJDPBO2pikY1zJW8ngj5w9vNQ7bDtCh2VbONQ6wqKdtULXA17IS7dEsjnhjGk4OAXOHFRfoqw3Kn6PuhGX0SCt8AcT1nzurMrzHn\\/oyxfLpWaTr9bbA9aWaxwPqbg+nhqIoWcXP6meOUge1sZQGvtx17tu0bsytG2266sobraKmWCer02aLq4o6aZ+43dk3ic5c3sGOeTjC2D2o642i0enrVcdkunLVcoKy2vr6ytuNYY2UjQxrmgMGC8kE9o+b61q3rjbBpLVPQ8smhLJdIarV1VT2+3ttUeTM2aOaMneGOAxGfat0q2jktuyKopJ2lk1Lpx0TgexzabB\\/EICCdE\\/aHftqeyePUmr6mOpuM9yqYyYmbrGta\\/gGjuwrzWsfQJGOj7RgchdqwfywtnEAREQBERAEREAREQBERAEREAREQBERAEREBHNX6D01r2khpNZWG3X6mgeXwx11O2VrHEYJGRwPsXp0zpSzaNtMVp0ta6OzW2Jxcymo4WxRtJOSd0dpPHKzSIAiIgCIiAIiIAiIgCIiAIiIAuMc1yiAxV5sFvv1OyC70UFdEx2+1krA4B3evUynMYY0M81owAMY4L1oscsb5ramChFO9tf8AnPcjdfomx3Sr8KuFmoqmoJ4ySQtJPt71m6SlZRsZFTxthhY3dYxgAAHdhelFhGlThJyjFJve2l\\/b2mMaVODbjFJvf1hERbTaEREAREQBERAEREAWA1XonT2uaGOh1fZaC+UbHb7Ya2nbK0O7wHDms+iAj2l9FWDQ9C+g0dY6Cy0b39Y+KjgbE1zscyAOJ4AZWHvmx3QWpry29ah0bY7ndw4ONXUULHyEjkS4jJx2ZypyiA6RRthY1jGhrGgBoAwAF3REBBKHYzoC16gbf7fo2xU15ZKZmVsVBGJWyHm4OxwPHmFMKqijrKaemq42z087CySN3EOaRgj2YyvWiAwOldG2PRFrFr0pa6W0W0PdIKalj3GBzjlxx61nkRAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEXwqayGjbvTu3W5xyXl8eUWf7af8ARKi6IukZFFj\\/AB3Rfpf5JTx3Rfpf5JUZkRmRkEWP8d0X6X+SU8d0X6X+SUzIZkZBFj\\/HdF+l\\/klPHdF+l\\/klMyGZGQRY\\/wAd0X6X+SU8d0X6X+SUzIZkZBFj\\/HdF+l\\/klPHdF+l\\/klMyGZGQRY\\/x3Rfpf5JTx3Rfpf5JTMhmRkEWP8d0X6X+SU8d0X6X+SUzIZkZBFj\\/AB3Rfpf5JTx3Rfpf5JTMhmRkEWP8d0X6X+SU8d0X6X+SUzIZkZBFj\\/HdF+l\\/klPHdF+l\\/klMyGZGQRY\\/x3Rfpf5JX0gudNUv3YXlxxnkpuibo9iIikkIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIDC6kH9is4n5x4D2FQO\\/6qtmmvBzdpZI+vLgzcaXcsZ\\/Wp3qP+Cj\\/C\\/YVQW2sedZB2E1BI\\/0FxuK4qphMLOtT3VvrY4nFsTUwmEnWp7q31sSjyqaZ+lVP2BTyqaZ+lVP2BWv+43uCbje4LwP6lx3ZHufifPf1PjuyPc\\/E2A8qmmfpVT9gU8qmmfpVT9gVr\\/uN7gm43uCyX4kxz5R7n4kr8TY9u1o9z8TYDyqaZ+lVP2BTyqaZ+lVP2BWv+43uCbje5Y\\/qbG9ke5+JC\\/E+OfKPc\\/E2A8qmmfpVT9gU8qmmfpVT9gVr\\/uN7guerb\\/FU\\/qXG9ke5+JL\\/E2OXKPc\\/Ev\\/AMqmmfpVT9gU8qmmfpVT9gVr9uDuTdHcE\\/UmO7I9z8R+psf2R7n4mwPlU0z9KqfsCnlU0z9KqfsCtfwxuPmr6w0klRv9RC+XcG87cYTujvOOSlfiPHPZR7n4kr8S4+TslHufiX35VNM\\/Sqn7Ap5VNM\\/Sqn7ArX\\/cbnGBlNxvcFj+pcd2R7n4kfqfH9ke5+JsB5VNM\\/Sqn7Ap5VNM\\/Sqn7ArX8sH8Vcbg7lP6lx3ZHufiP1NjuyPc\\/E2B8qmmfpVT9gU8qmmfpVT9gVr9uDuXIYO0J+pcd2R7n4j9TY\\/sj3PxNgPKppn6VU\\/YFPKppn6VU\\/YFa\\/7je4JuN7go\\/UuO7I9z8SP1PjuyPc\\/E2MtWv7Heq+Ght0876iXO6HRFo4An9inNoG5WPGfzSD+C1l2bDd1pbd3hnrQfs3LZyygGtdnsjJ+vgvZcExtXiGHdSpa6bWnuZ7XgeOrcQwzq1bXUraeqzJSiIvSnqAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgMLqP+Cj\\/AAv2FUDtr+fY\\/wDrH\\/dq\\/tR\\/wUf4X7CqB21\\/Psf\\/AFj\\/ALteb4\\/\\/ANvq+76nmvxB\\/wBuq+xfUqlERfIz44FPtntJQ2yC6amv1O2pt9A1sLGFoO\\/JIQOG9w4Dn7VAD6u8dmVcVystFbtC2bTVxvdDaKl5NbWR1DXOL3uHm4IHLieHsXZ4VSk6kqySeROydrZuSd2l699bHb4TSk5zrpJ5FdJ2s5PRLVpevfWxANd2NuntSVcELcUsp6+n3RgdW\\/Lhj1A8PcvZYtn1yv8AQCuNTQ2ujccMlrpurD\\/ZwOf3qU69tkd10VaLrbrjT3aS1DwOqqIAQ1zM+ZkEZyMDj7V4drQLaTR8MRzSG1NdEOQLvNz9eP2q5XwdGjVrV6kbwSUkk98ztur6J3T3LuIwVGjVr16kbwSjJJPzn2q+id1pfsMG7Z3XU1+htlwqqClZK0vjqpJSIJgOxrgOPMLP7VNF01qv0LrTLQU8FU6KJlJHJiRriBl7h2DI71FquvvU2nbNTV0ZdZYZD4G4xjH98M8ypVtTcW7ToiHAZZS4z2DPJY5cN1SqoU3q6e71WbXuWvt35EOGGWDq5Kb1dO13qs38LX278iD6m05VaWu0tsrpIZZ4g0ufDkt85ocOYHYe5ey8aKudnvFHaXBlZW1cUcsTafLgQ8nA4gceHFZvbL5u0C4N7d2AAd+WNA\\/FSbVVvq7ntO0\\/S22pNHU+LYMzt5xt87JHrxyWM8DRdavCP9s4pa8nJrnpsjXPAUniK8I38mpGK15OTVtdHdLfluRibZNdoqWZ8NwtdVVRMLn0cNTvzDHMbuOY9vYsjsojdE7WLZGlr2WiVrmkcQcuBCy+jJ9HRa7t8dnZeJbl1j2ieeZu492DkloOce0ZXOjWNbqTaQ1owBRVI\\/luXSw+Fw9OtSrUeblFrNmWkZPey19R0cNhMPTrUa1B\\/wB04u0sy0hJ3vZarnyIdT2+qOzCpqxBQeCsuLYzM7PXhwA4Dhjd+v6l6qXZZU1UcTmaisDXytBbGa073EcsBvP1L2U4xsRrxzzeccfXuhefRFvp7DbX6x1FF1lLAS2ihI4yT54HHcD2qlChSnOiqkbpwTbu1Za3ei+veVYUKU6lFVIXjkTbu1lV3d6L6mE1FoS46evVHaJJqeur6oZjZSFzjzxg5Ax2n2ArK1Gya7xwPdFXWuoqo4jI+ijqd6cADJ83HNeHTsl11hrqCSGsNPW1cznunGPybQCcD2DIHtU40g7R9Pr6mhoG3ee7ieVhqZpW9W52HBxLcg9ncow2FwleWaUbRlLLG8mu5Wbb562RGFwuCxM8zjljKWWLcrcuSSbb2etkV5pbRNy1ZLcobc6CGaghMssc+QXYyN0YB45HbhefU2mKjS1ZDTVdTSVT5Iy\\/NNJvhvnEYPAceCsnSOY7xtRdE4sc2kqHNI4EEOeqaaAMkcN7ziB2nvVPF0KGGw8Ek3NuWt9PJk47FDFYehh8LCybm3LW+nkyy7dp2REXGOKSnZx\\/dpbP+l\\/3bls7Zf4c7t\\/JO+riFrFs4\\/u0tn\\/S\\/wC7ctnbJ\\/DXY\\/ROz+C+m\\/hb\\/Bv\\/AFP6I+o\\/hT\\/BS\\/1P6IlCIi9me3CIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAwuo\\/wCCj\\/C\\/YVQO2v59j\\/6x\\/wB2r+1GP7Faf779hVA7ax59j9tR\\/wB2vN8e\\/wC31fd9Tzf4g\\/7dV931KpREXyM+Nn3opxS1lPUOjEohlbIWOOA7dOcH24wsjqjUNTqq9T3WujZDJM1oEcbiWtAHADKw6Lcqs1SdJPR629aTt9TZ0tRUnST0evvSaX1Zn7Nqmez2a82oU8dTTXSMNfvvIMZAwHNx28vcsjatoU9BaIbXdbXRXulgOYPC2EuiH8Vp44Ch6EZC3xxlam0oSskmtrq2\\/P1lqnj8RSaUJWSTS0v5O9td7vX1Eg1NrCs1O+nbLBT0VHTDFPS043Y4+XIfV+terUuuJtUU1KKu20kNwhc0uroyetkDewk\\/FRTBXOOCxeLrvPeX77X07NvZb1bciHjMRJzvP99r6b2205W5WJ+7axLOYZqzT1qrbjCwNbV1ERc4kcATnuznmsZcNolwrtVUWoIoIqWrpI2xBrAS1wGc5zjgc4UTAQjK3y4li6is521T5Lb3a+03y4ni5qznbVPTTVdun8liw7W5aGqNTa9N2ehqHuJlkjjO8\\/PPzhxHHuWFtevKm2XC\\/wBbFRxOdeoZIpWl7gI98niPrPaooimXEsXOSk57ez2Pl2aCfFMZUlGTntqttG9Hpbs+pIYdVzxaOl04aWN0EtWKozmQh2eHDd+rmpFVbVW19FR0Vbpa1S09I0NiaZHANwMZxgAfUq8Qjgop8QxFJWjLklsmrJuy19pjT4jiqayxlo0o6pPRN2Wq9epJpdZdVfLddrLaKOzy0JcQyncS2TP8bkeWVI4tr81JXCsoNOWilncd6aSJh3n9\\/HgRlVrulcgKYcSxVJuUJWu76W39WmnrsZQ4pjIXlGdszu7Jb7XWmnusSug1zV26s1LUso4HG\\/RyMlaJXYiD85LeBz848ComBgj2ALlFUq16lWKjN3te3\\/k7v33KdWvUqxUZu9r2\\/wDJ3fvuERFXK5KdnH92ls\\/6X\\/duWztl\\/hzuz8m7Hr4hax7OB\\/56Wz\\/pf925bN2V2Kxx55jI9nEL6b+Fv8HJ\\/wD9P6I+pfhT\\/Ay\\/1P6IlKIi9me2CIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAwuoz\\/AGK3u3v\\/APkqr9b6IOsDRHw4UZpjIW\\/kus3t7d\\/vh3K3bhQsrmBj3OaAc5C8PyegP\\/tJPequIw1PE03Tqq8WUcThqeKg6VRXiyg\\/Io\\/04PuY\\/pE8ij\\/Tg+5j+kV+\\/J6DOd6T3p8noOPnScfWuN+Q8O9F82cj8g4d6H5soLyKP9OD7mP6RPIo\\/wBOD7mP6RX78noMDzpOHrT5PQZzvSe9PyHh3ovmx+QcO9D82UF5FH+nB9zH9InkUf6cH3Mf0iv35PQYPnScfWnyeg4edJw9afkPDvRfNj8g4d6H5soLyKP9OD7mP6RPIo\\/04PuY\\/pFfvyegznek96fJ2DGN+T3p+Q8O9F82PyDh3ofmygvIo\\/04PuY\\/pE8ij\\/Tg+5j+kV+\\/J6Dh50nD1p8noM53pPen5Dw70XzY\\/IOHeh+bKC8ij\\/Tg+5j+kTyKP9OD7mP6RX78nYMY35Penyeg4edJw9afkPDvRfNj8g4d6H5soLyKP9OD7mP6RPIo\\/wBOD7mP6RX78noM53pPenydgxjfk96fkPDvRfNj8g4d6H5soLyKP9OD7mP6RPIo\\/wBOD7mP6RX78noMjzpOHrT5PQcfOk4+tPyHh3ovmx+QcO9D82UF5FH+nB9zH9InkUf6cH3Mf0iv35OwYxvye9Pk9BnO9J70\\/IeHei+bH5Bw70PzZQXkUf6cH3Mf0ieRR\\/pwfcx\\/SK\\/fk9Bx86Tj60+TsGMb8nvT8h4d6L5sfkHDvQ\\/NlMaZ2XHTt6pri+6+E9TvYjFMGZy0jnvnv7lbFjbmrOM\\/MOeHsXvGn4Ach8g9hXoorTFRSmSN7ySMYJXUwuCoYOGSjHKt\\/wDncdPC4Khgo5KMcq3\\/AOdxkkRFfOkEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREBwThcb4R3NYa7181JMxkJGCze4hDBtozO+E3wor47q+8e5PHdX3j3LXmMOkJVvhN8KK+O6vvHuTx3V949yZh0hKSQSuM4UX8d1fePcnjur7x7kzEZ0SneTeUW8d1fePcnjur7x7kzDOiU7ybyi3jur7x7k8d1fePcmYZ0SneTeUW8d1fePcnjur7x7kzDOiU7ybyi3jur7x7k8d1fePcmYZ0SneTeUW8d1fePcnjur7x7kzDOiU7ybyi3jur7x7k8d1fePcmYZ0SneTeUW8d1fePcnjur7x7kzDOiU7ybyi3jur7x7k8d1fePcmYZ0SneTeUW8d1fePcnjur7x7kzDOiU7ybyi3jur7x7k8d1fePcmYZ0SneTeUW8d1fePcnjur7x7kzDOiVb4TfCivjur7x7k8d1fePcmYnpCVb4TfCivjur7x7k8d1fePcmYdISrfC7c1GKS8VUlXBG4jdkkDTw7FJxyWad0bIu6uERFJkEREAREQBERAEREAREQBERAEREAREQBERAEREB1co5f\\/wCFw\\/4v9qkblHNQfwuH\\/F\\/tWqezNc9mUPtG1XeLPqh1Nba+Wng8GifuN5ZOVFPKBqT0tP7lktrX92b\\/API4f1FQdfI+KYzE08bVjGo0lJ7N+o+OcUxuJhjqsY1Glmezfq5Em8oGpPS0\\/uTygak9LT+5RlBlzg1oJJOAAOJXNWNxjdlUl3vxOZ1\\/Fekl3vxJN5QNSelp\\/cnlA1J6Wn9yydLssu8tPFJW1Vutr5eLIaqo3HkezCjV\\/wBP1+ma7wO7RCKQt3mOByx7e9p7VaqS4nShnm5pe18\\/f9S7VfFKMM83NL2vn79PeZLygak9LT+5PKBqT0tP7lGiN0AnuyucYbvEt9naqix2Le1ST978Smsdi3tUk\\/e\\/EknlA1J6Wn9yeUDUnpaf3KNEYGcgnuC672D6u\\/Cdexa\\/zJd78SHj8Ut6ku9+JJvKDqPJ\\/wDK82R2cE8oGo\\/Ss6+Gm9OG\\/wAN5k8I6nxdQPqyNzO\\/u\\/m8+CwPt4fUrEsRjqcI1JTlZ3t5T7bdvaWJ18dThGpKpJJ3t5T7bdvaSbygak9LT+5PKBqT0tP7lj6Gwz19quFximgZFRbu+x78OfnPzRj1LEg5APLPqWqWKxsIqUpySeu78TCWKx0IqUpys9d34km8oGpPS0\\/uTygak9LT+5RnJzjByhPaOI78LBY7FvapLvfiauv4p\\/5su9+JJvKBqT0tP7k8oGpPS0\\/uUaXAcMduScYwnXsX6SXe\\/El47Fr\\/ADJd78STeUDUnpaf3J5QNSelp\\/cozleu2W2rvFbHR26B89RJ8xjRn2n1LKOMxsnlVSV\\/a\\/EyWMxjllVSTfZd6+zXX3Gb8oGpPS0\\/uTygak9LT+5ZaXZRdmDchr7VU1WM+DRVWZM92Mc1CKqnmoqiSnqY3RzROLXscMFp7iOz96sV6nEsMk6spK\\/rfiWK8+JYazqykr+t+3tM\\/wCUDUuf+FplyNoGpQcG7T57lGCMOPA8Oazts0+Llpu9Xo1Bjbbeq\\/Ilu91he8Nzn1ErXRxGNrTyxqSvZvd7LV8zClicdXeWFSWze72Wr5nq8oWoz\\/xtP7lz5QdSelp\\/couPX5p7cjC7jj2gcPetXXsXa\\/Sy734ldY\\/Fell8T8SS+UDUnpaf3J5QNSelp\\/coyDvEAcc+pMjJGRw9Sjr2L9JLvfiT17F+kl3vxJN5QNSelp\\/cnlA1J6Wn9yjOe7BHeEUdfxfpJd78SPzDFell3vxJN5QNSelp\\/cvRbteahnuNFHLdZjG+oja4EcwXDKiS9Np\\/4Vt\\/+Ux\\/7QWyGOxWeK6SW65vxM4Y\\/FOcf6kt1zfibXUYxXUxGeM7VM\\/zQodS\\/wAMoz\\/zo\\/apj+aPYvti3Z9xhpc7oiLabgiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgOrlHL\\/APwuH\\/F\\/tUjco5f\\/AOFw\\/wCL\\/atUzVPZmt21v+7N3+RQfqKg6nG1v+7N3+RQfqKg6+NcW\\/x9b\\/U\\/4PiPFv8AH1v9T\\/gKXbMKCC465tMVU1r42vdJhw5ua0kfiAoieSy2lrydPX+guJBMcEoMoHMs\\/OwqmDnCniacp7KSb9zRVwUoQxVOVT9qlFv3NH11ncZ7pqi6T1kjpXipkY3f47oa4gAfUF9Llqia\\/Wy0W27iNsNAdxtSGl0gYef1cFMb9s3m1Hcp7to6eintNS7fZ1k4jMeeY3SM81jrzDpey3LTtA0RVb6WVpu1THlwed4ZaDyIHHkurVwuKjOrOclGMnu9pXlpa2\\/bfTQ69XCYyM6sqkkoye72knLTbe2jvpsZy3SWepuNDTWrQE9banubE+qlp39Y8HgZM4wO\\/mvhYdJW2m2s1NlqqVtTboy8shlGQAWtcAfZvLP3mzX+r1VT3Z9+p4dNtqGTRObUluIgR5u4OfYulBNGNuNbM17XwGInfad4YMTF3J0Y9JTdRWSqJK6illyu9kuWnO5350I9JT6SK\\/6qSuoJZcrvZLlpzuYrS1ZpLUV7GnTpangjn6xkNSJXOlbugnJ4DnuntXSy1WlJdURabOlqeendMaY1kkpM5IHP2ZB7VHdmrv8A0j2xzXAASTEnuHVvXGmiG7VKZ8hw0XI5OOQ85c+liZOnSnJRvncW8sf26af7\\/M5tHEylClPLG7m4t5Y\\/t0029e\\/zJDoeho7LqHXFHXB0tDTUNQx7WHBMQPED6l10\\/U6X1tLLYo9N01pq54n+B1MLy57XBpdx4AZ831r3WKCGbWWvoa6bwennpZ4+tLSRhx5jhx4Z5LzaT0c\\/Qle7UuoqqiZS0MT3QNhnEjpnFpaMDu84K3Tp1I9HCEU6alNSuo6RUud9tOwt04VY9HCEU6alNTuou0c2m+2nZuR2y2KkdpDWclfTxTVtvdA2KVzcljt9wJHtwPcvppiotdPZmij0tLqa8Old4QZIXujhZnhjAwSRx+temx1YrtGa+nLcOqJYJA0d5fI48FmrbSXK+6Cs1LoWuhopqeWY18bp+pcXE8DnHEYVWjCL6N0t8kmvJi5Py3bR6Xs+fIqUKcX0cqVm1BtWjFyf9SSVr6XSfPlyMJtA01SQ2iy3yjthsj613Uz0Lmkbrgc5we8epZfaJU6Y03I+2UGmac1tRRtcaouI6kkcC0YOT7l89e0hg2faepn3Bl1qoKwiWZry7JJPaePAnCxe2bddq2Ex8Wmgh49napxf\\/p4VpwSTtT3UXa8Xe3Ja9hli2sNCtOCSl\\/TvdRdrxea3Ja9lrEAphFJPE2pkMcDngSPAyWtzxOO3grUop7O+SlgtOgJLnaxuMdXSxPEkmSAXjhgAZJ+pVtp+SlhvlufdAHULauN1Q0jIMYcM\\/hlXDqS03256gjulLfqak0x10MkB8IMYZGAPN3AOeAfxVThdNypzlBJvNFWtFuz3d5aZe2yKfCacujnKGss0VootpPd3loo8nZcyttf2Gm05qqtoKBrmUzd18bHfmhwBx+KkGziZ1s05rC70pMddT0gjhkHzo94niF5tsUrZtc1UkcgkY6GItcDkEbgXn2cXmgpJbvaL9IYaC70\\/UdYG53H5O6Tj281jTUKHFZqLUVeVttHZ2tyWpFPocPxaUYtRV5JbWV07ezXsZFKOvnoq+Kup37tVFKJWyHnv5zk9p\\/erC0lLDrvV13rb9RU0j5KB8hYGebvtZje49vBeam2UV1NXRTXmqtzLO2XrJakVOS6LOeAxzI4YWQ0teLHBtGuEVmEdHaauCSlpnHgC7cA3j7TlbMJh62HqwjiGlFy\\/a7atxettVZX301MsHh8RhqkI4m0YuS8l63dpa81ZX301I9srtlHedVwUtyp46inMUh3HtBHYs1oiW2UeltaSXmkdV2+F8RfTxndL8S+aB9YCkGznQVdpTU4rrpU0UdP1MjIdybedLnt4DhwWA0Zb47lprWtvqqiOjNTIxjZJh5oIkJ4+rOB9auYShPD06eaKUv6m9tfJ8nnrc6GFw9TDwppwtJ9LvbzfJ563Ppa4tP7Qbdc6C3WOCx3WmpzUwzwOyHNbza71\\/UsFpCa0U1tmf4gl1JeXy4ZC6Nzo4m953f8A8qTafsj9mdPdbzqSemM81Iaelggl6wyF3b7OAXGloqm87OmW\\/R9dBb7o2pc6va6XqXSF3aHexKdKUpQdSKVVRldKMb7rLp+3NZvfkjGnQnKdN1IpVVGTaUY3flLLpfLmtffkjxa4sdI7R9DfILEdO13hJhnpw0hrhxwQDy5dyyGqpdM6Ugsbm6bpa6pqbfFLL1zi1mO04\\/jEnmmp6Sek2Yx2+tuDLldILiHVJZKZN3OcDJ544LCbVnMM2niHDItEQd6iBjCYlrDwqVIpKWWnuo3vd30Wl+2wxVsPCrVikpZKb1Ud8zvotL9tjy7RrXbqd9nutipvA6O6UnWmAfNY8Hj9ag4U+16Mac0Y1uSWW8h4xgtO9yKgS4HEVHrMsqSvZ6bXcVe3vPP8TjGOKeVJXs2l2uKvb3heq0f8KW\\/\\/ACmP\\/aC8q9Vo\\/wCFLf8A5TH\\/ALQXPj+9e1fVHNh+5e1fVG2FL\\/C6L\\/Gj9qmP5o9ih1L\\/AAui\\/wAaP2qY\\/mj2L7z\\/AHP2v6n6BW8vad0RFtNoREQBERAEREAREQBERAEREAREQBERAEREAREQHVyjl\\/8A4XD\\/AIH7VI3KOX\\/+GQZ\\/iftWqezNc9ma37Wx\\/wCeTz\\/\\/AE4f1FQUnCs7abpu73TVbqi22+qqafwWJvWRR5GRngof8iNRH\\/ieu+uL96+QcVw1eeOrSjB2zPk32c7WPjPFcNXlj60o03bM+TfZzsYHKZB5hZ75D6i9EVv2X70+Q+ovRFb9l+9cvquJ9HLufgczquJX+XLufgYIPIzjAzzwF15DzSQe9Z\\/5D6i9EVv2X70+Q+ovRFb9l+9Oq4hf5cvhfgR1TEL\\/AC5fC\\/AwQeQMZzwwMj9nJA8h29k5xx9azvyH1F6Irfsv3p8h9ReiK37L96dVxN79HK\\/sfgT1XE3v0cr+x+BgQ4h29xyhcT2kcfUs98h9ReiK37L96fIfUXoit+y\\/enVcT6OXc\\/APC4l\\/5cu5+BgS4kuxhoIwQAOPtXLnlww7BHsWd+Q+ovRFb9l+9PkPqL0RW\\/ZfvU9WxK\\/y5fC\\/AdVxPo5dz8DAlxIwCR3+tA4j848\\/Us98h9ReiK37L96fIfUXoit+y\\/enVsSlZU5dz8COqYm1ujl3PwMAMhu6SSM55D4LkuJJLiT7VnvkPqL0RW\\/ZfvT5D6i9EVv2X706tidujl3PwJ6rifRy7n4GAPHOOH4rkOIBGeB7McFnvkPqL0RW\\/ZfvT5D6i9EVv2X71HVcT6OXc\\/Ah4TEy3py7n4GB3ifncSuO\\/wBaz\\/yH1F6Irfsv3p8h9ReiK37L96PC4l\\/5cvhfgOqYi1ujl8L8DAEktw4l3fvLneI5cu4jOFnvkPqL0RW\\/ZfvT5D6i9EVv2X71PVsT6OXc\\/Ay6tit+jl3PwMFvnII4EcuHJcE+bujgO3gOP4LPfIfUXoit+y\\/enyH1F6Irfsv3p1bE+jl3PwIeFxL3py+F+BgS4uOTgkcjjiuWvLeIPHv7VnfkPqL0RW\\/ZfvT5D6i9EVv2X71PV8V6OXc\\/AdVxK2py7n4GB3nHGSDg54tHH2964PnAA8hy48ln\\/kPqL0RW\\/ZfvT5D6i9EVv2X71j1XE2t0cu5+BHVMStOjl3PwMBk8MnP1ALnKz3yH1F6Irfsv3p8h9ReiK37L96dVxPo5dz8Ceq4nbo5dz8DA5XstIxdaD1VMf+0FkvkPqL0RW\\/ZfvXpt+jdQRXGie601wa2ojLiYgMDeGT7lsp4XEZ43py3X9r8DKGExGeN6ct1yfgbKUh\\/syjHdKP2qY\\/mj2KGUfGupsHI65oA7uamf5o9i+3rdn3WDvc7oiLabgiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgOruawd6pJ6ieN0MZe0MwSO\\/KzpblcbiGDTZEPFlZ+hcniys\\/QuUu6ser3J1Y9XuWvKa+jIj4srP0Lk8WVn6Fyl3Vj1e5OrHq9yZR0ZEfFlZ+hcniys\\/QuUu6ser3J1Y9XuTKOjIj4srP0Lk8WVn6Fyl3Vj1e5OrHq9yZR0ZEfFlZ+hcniys\\/QuUu6ser3J1Y9XuTKOjIj4srP0Lk8WVn6Fyl3Vj1e5OrHq9yZR0ZEfFlZ+hcniys\\/QuUu6ser3J1Y9XuTKOjIj4srP0Lk8WVn6Fyl3Vj1e5OrHq9yZR0ZEfFlZ+hcniys\\/QuUu6ser3J1Y9XuTKOjIj4srP0Lk8WVn6Fyl3Vj1e5OrHq9yZR0ZEfFlZ+hcniys\\/QuUu6ser3J1Y9XuTKOjIj4srP0Lk8WVn6Fyl3Vj1e5OrHq9yZR0ZEfFlZ+hcniys\\/QuUu6ser3J1Y9XuTKOjIj4srP0Lk8WVn6Fyl3Vj1e5OrHq9yZR0ZEfFlZ+hcniys\\/QuUu6ser3J1Y9XuTKOjIj4srP0Lk8WVn6Fyl3Vj1e5OrHq9yZR0ZFqS3VTKyme+JwayQOceHAKWBdQ3HLh9S7Dgs0rI2xVlYIiKTIIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiJlAEREAREQBERAERMhAEREAREQBERAEREAREQBETKAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAKBbVdsOltjNmo7vrmoqaeirKoUsToKZ0xMm6XYIHLg0qerTf+qNjOyfTJ7tQMP\\/APhKP2oCb03Tp2NVMjWC8XCIO\\/OktsjQrv0drvTm0C0tuujbvS3ihJ3TJTyB247Gd1w5g+orXHYR0f8AZXqrYdpG66o0laqysqqIvqayTea5zhI4ZLgR3AfUqK6GV1m03t91pZtLTuk0e0VvWPcTIBBC9whkzwySMceZQG921faZatkuirjqm\\/AywUbAWUzHtbJUPJADGbxAzxXm2SbRKnalpGn1LJp6r05S1RJpoax4Mr48\\/PxgAA8x3hajal21bTekBe7nT7NNmVivWnLFMXRuvlF1sjjng4b72tBO7wAGVdXRh6RMm1mnu2ndT2uCy6n05H\\/ZsVNGWQdW15b5gLjjdwARlAbHBwIyuokBIA7e7itGb10udpW0DaZXab6PGnbferfQsLjJV0znyS7hw95d1jQ1hPADmspsf6Ue0LXnSFo9B6rtFHYaB0Mwq6IwO6+OWOFzzh5ceBcOXHh2oC3bN0oNPXvbXV7L4LPdWXKmnlhNY8R9SXxAl3De3sebwOD7Ar23wtMtHbbr7dOmPddET2uwMt0VVV04rY7Y1ta5kcRc0GbOT3exYm49KraizbdrnQOlrBQ6jmoZ6ils1OynLXteyRuJJnb43mhgfnGOJagN5N4ev3LjfGOII+paUbJuldr\\/AMtDNne3Cy2621tVI2nhFHTOY+Kd4DmBzt9wLSD3fWpjtr6RetrTtJg2b7GdMw3TUJ3TLWV0TjCCWb+43zmjIbglxdjswgNp94IXAc1qLsh6TOuXbXHbMdudiobTfahn9iz0TSGB5ZvNa4b7g4OAOCMdi23eDg7hG9g4PcUB23wm+Fq9sk28ao1B0gdoegNdOoI7fYxUyW51PAWSbkcgxvO3jn8k4HkFitgnSjum1Dbnq3SN0dRCxRNqH2V8NMWSvbHKGjfdvHOWZPLmgNtt9pOMpvhao7EekLqvapt21pp\\/eoDoexRzvje2mLJvNkDGFz97BBIceXYojdOlRtT2o6uutu6OWkqS5Wi0D8rU19PvvkO8QHf2xrWh2PNb87mUBurW1Ap6SecDfEMbnlueeBnH4Kj+j90mbV0gK2\\/01lslbZxZ2Qve6qmY4yCQvAxu8iNzt71g+j30kZdtFm1LYtV25ln1lZYZG1lPE1zY5G4c0locSWkOBBBPd3rSvonau2j6Zn1XTbGdNQ6hvVfDTunfUDeip4WOk4kbzeJLuHE8uSA\\/WjeBXK1Y6MvSdvW0zUt20RtMtMFn1bbWveBBE6Njw04cwsJOHDOeeCFtM44CAFwBwqB0\\/wBKK1ah251WymnsNbBcaWoqIH1r5WGJxiYXEgDjg4VL3rpabUdoG0e56f6P2lqK6W61OcyWWrgc98u64hzyesaGtJGAOZxlVZ0fb3W6k6bUl2vFA613Grqa+SppH84ZOocHN5nt5cTwQH6cA9vYRwQPB7FqFtd6VOrjtFfs72Cafgvd\\/oZnw109XC6SPeAblrAHtHAniXcFkNi3SW1ZVbSJtmm3ezU9i1VI1j6B9NCWMl3gCGOG+8ZIPAg44HPFAbXOzjzTgqgtmfSftO0zate9BUNir6CttDqhj6mWZjo5DE8scQB5wyRwV+nkvzn6KTms6X+0Fz3YxNc8cP8AnygP0XDgBx7OBXIIPJaX3zpL7WNoWvbrp7YJpCkmobWZGTz3aJwdMWPLS5pc9rQCG8Bgnipt0a+kletpepb\\/AKG2jWins+sLI175BTMLYntZIGPaWlxw4Et7cHPBAbK1GWxvePzWkn14VDbEOk\\/adterr3py1WGutc9nidLJLUTMe2QCTcIAbxznir5qONNL\\/gO\\/Uvzt6Av\\/AO9e0LHPwKX\\/AO5CA\\/RcOB9SbwzjitItS9LXaLr3X9dpfo5aXpLtDbOsFTUVkLnmQseWlzfPa1rT2ZySpjsN6T961rfr1oHaRa4bLtDoxL4LBBGWRSubHnccHOdh2ePYCCOHA5A2CdtM0g3VZ0o7UVubqMODfFxqGibeLd4DdznOOOPWpTvjOF+S0tZtbHSndUm22wbUfCWF1IC3wUv8HAb+du46vHatz9uXSVrtiOi9P0ddQwV20e7UzH+AjedTxnk953XfN3uAAdniEBs3vc1xvhaLwdK7a\\/syvdln2+aNo6LTV2HmS0dOY5W5HAg77hw5lpGcKWdKXpN6k2Oal0L8kPAaux3mkNZV9fTl8j4w9vzDkbuWk9h4oDbWrqoaenknnlZDDE0vkke7DWtAySe4DmqY2V9Iek2u60v1j0rp+udarPI9sl7klb4PKQ7dAYAMku4kceXaqcsW37adqzQe1fUOq9LUdr0\\/QWJ1ZY46q3P3JgSQGybziHjd5jgpR0VtrTaro+X7V19tFuttNY6+rYaSyUAgYWMjZJhsbc5eXSu94QG1IeCM8fcuQcrQ+LpJdIjWFkvGsNF6GtEGk7Y55fHUwOfMGMGXZ3pA55HPLW8lsf0ctutJt40VJdo6Pxfc7fK2muFOPmCQsDt5nPzHZOASSMIC4lxvDGef1KO671pbtnukrxqa+uc232qmdUTbjcucBgAD1kkAe1aURdKXb7rS23jWGz\\/QltOiqCSWQOnpnSv6lnE7zusBcWgHeLWj2IDfne9S6iRrhniBnHELU3VHSwrbl0aZdpGhYKWkv1LWU9HWUtTEZYoZXOAfjiMjHEHPbxVi7D9qV+2g9Hmm13fzSi+yUtfK7qIdyLMMsrWebk8MMGePegLK2gaxp9B6Iv2p6umkrKe0UUtXJBGQ10jWNyWgntOFD9gW2227d9IVuorNaqq0Q0lxfQvhqXte4vbHG8uBb2YkHryCta9E7cNU7cejLtsrtbeACotttlggNJTmIbroHE72XHPEKoujdtE2waT2W3ij2M6Tpbvb6W6zV1yraqIyAOMMTerYN9vECPJGCePNAfqNvApvA8lrn0cOk4za9pm+\\/KmjbbtSabgM10ip4nNjdH53nMBc45G4QRnmqn\\/rmdt202vvtz2K6Mto0vZ\\/nOuMOZ3tAyTxkbnIBOGjggN498ev3JvgrXbo8dJB22nQd7qrhSw2\\/VlmildV08TT1RAblj2hxJweRBPMFUNsy6WG3LabY7vSaO0lbL\\/faaZrjUx0u5BTw7vzS3rBvPJHDjjHYgP0D3h9aZC1e6L3SPv+1O5am0ztJoqO3aosgMhbTROjaY2u3HhzS53nNd3cwodfekrtf1\\/ry9WLYFpCiqLdZy4SVV0gcHThri0vbvPa0AnkOJ9aA3S3guVrD0auk3dNp+pLvoXaLbIbXrW1GV0gpYyyKRkbgx4ILnYcHHjxwexbPIAiIgC04\\/qjXDZRpnBwfH7MfYyLcdVjtu2IWPbtp6gsmp62voaaiqxVxvonsa8vDS3B3mu4YcUBqJsl6D9p2j7NNOalr9b3mjddKQSupYomOjjwS0AZPcFtLs22MaU6Oejb5PpGlnrKltM+pqaipIdPUGKMkN3gOAOOQ4ZKsDQGi6LZ3o60aYtM09RRWyExRSVDg6Rw3i7iQAO3uUikjbLG5kjQ9jhhzXDII7igPzv2U3\\/VvSYn1RftYbZLhs9obVK0sobXW+CNERGd85e0BrRw3sc+KxfQvoX1O03bBb7Xcn3R8lirIKeukky6oJqN1spd2l2Q7PrWxN36Cey+8apfey26UMUk5mlt9LUMbTvJOcbpYSBnsBCmGynowaT2Oa0umptHVlzjfcKc076OaRjoWMLg7Aw0Hm0dqA1b\\/qfesNOaSuutNP6oqoLTf6vqZInVr2wkxxbwfHl2MEF2SPUT2L6aAvtt1F\\/VCa242KshuFBL4UIp4JBJG\\/FGQS1wyCMg8l22oO6OGr9p+on68dfdGXq3z7sppYHMhrg0DJDAwlrjxBOADzysP0TNOQ6q6TFXrHQmn6i2aFtkFS2CV480ExCNrd7kXne3sdg\\/ED07PSP\\/ANQm9ngB4xuH+5KzmxBwHT22j5IAL7l7t9v7lshZujHpiybY6vajS3K6uvlVNNM6B8kZgBkaQ4AbmcceHFezSvRz07pHa3fNpdvuFznvl3M5mgmkZ1DetILt0BoPYMZJQGn+28\\/+vzprdPAV9o5f4LCpztO2o6w2i9JOfZbadZS7PNO0cvVGup3GOWWRsW+fPyMlxJDRw5DtCvnVvRg0vrDa9QbTK+43SC9UctPKyCGRghJhxu5BaT2ceK+e13on6C2yXxt81AK+33jcaySpt8zYzK1vAbwc0gnHDKA00t2notLdNTR9pi1pW68fTV9K2W511V18peY3Zj3t5ww3ljPDkv0+4HuK1qsnQk0DpnV2n9S6duF7oK2yujfG1s8bmyvZnzn5j4k544wtlGgtGCc\\/UgPzc6WxuWxjpBV2rbN1kUOrbBVQh8TjHuSPpzTvcHN\\/Oadx\\/eDg9yjt10nPsE0BsP2p2iGRt0q45TdmAlhmEp62IOIwT5hIIPcFvbtt6P2ndusVjj1VVV1KLPPJLCaRzGl2+G7zXFzTkeaOAwvdtO2I6f2q6CpdG359TR22kdE6nfRuY2SMxt3W4LmkDhkckBrP0M9B1c3R02gXi2v6rUWphXU1JVnzXN3ISyMiT539tc85zzGeaobotaXuepJNQWO2bY6vZbdIp2yyUIpyRVhgcHEnro+LcYLTk44r9Ldm2zq2bLtFWzSmnnzSW+3tcGSTlpkflxcS4gAEknuVV7Tehts22nXmS81kFZZblMczyWyRsQkJOSS0tIz60BVPR52NWDTe07V+orDtcg17dqOjngu8TKHqCXygkSGTrnh43mniOAI5qt\\/6nZqWzWLUWuae93Wjt0lVSUrqcVNQ2ISBjpN7G8RkjeHJbo7LtgOjNkNmrbfpCieyWuj3KqtncH1EoweBfjlxPDGFUtB0A9mVJaK+gnq71VSVUzZY6uSaITQYGN1jhGOB7coCmdk9ZT616eGob9pKpZWWZslVKaimfmOSPqWxl2W8C1zzkHkcZX6FVMbpaeRjCWue0gHuJCrTY9sB0dsSpalmj6SR1XVACorKl4kme0cQ3ewMD1K0HN3v\\/wAoD8+OgHqix6QvO0DT+qrhS2y91FRB1XhkjYy\\/qzK2RgLiDkOwd1YDY7dKK+dPW53G01UVVQ1FwuLoZ4nh7JB1D+IcOBzxW0O0noZ7ONpWp36hro660V0zt+pFtkZEyd2AMuBaePDjjC9ui+iXofZ\\/tJpdcaXmuNHV00ZZHRCRng4zEYycBodxBzz5oDR7T9krKfpOa6slVtKq9mFzmuNXHHc2wmQT70u8I3EyR7oc0tIJODwV36e2CW7y9aWuN92+x6u1hbJoK9lK+hHWzQQvDhF1oqXYyHHzcHIPLC2J2tdGXQO2WWOr1PQPpbpGMCvoXCKZwwAA52DvYwMZHBePY90VtBbGLg+6WCCquV2ILWVlwe2R8YJ5Nw0Ae0BAXcf2r85eitUCDpcbRX8HATXQkdpxO44HuX6NniqT2d9GXTGzbaNedc2e4XOput1fO+aOolaYmmV287ADQeZOMlAavaB1trHpN651XBfdqdXs5tNoLjT0drqfB3SRbz\\/75udwNGXfWsb0TKWmo+l1qylo77NqinipK5rbtUS9ZJWASR\\/lXOyQ4k9vH2rYvWXQd2X6x1NLfnx3O0zTzOmqKahqGsgle5xc4lpaSMkng0hZnZ30S9G7LtoT9ZaQrrtTVDoXQ+AvmY6nDHBoIxub35ueJQF61GDTygcfMdy9i\\/OToJxPqdr20qGB+5LLbahrHdxNRgFfo7JFvsc0n5wI596pXZB0Y9MbGNVXjUWm7jdKqrusZjmZVyMcxrS\\/fOAGg88dqA1n6AerLHpC67QdO6suFNar1LUU7o\\/DJWxGQRdY2Ru84jiHOBx\\/fZXht1fTa5\\/qhLbnpKRtXbaSozNU0x3o3COiEcjg4cMb\\/DPatltqHQ\\/2c7U72683GnqrNcZOM81reyIzOznecC0jPr5qX7INgmjtilBU02jqSR09S4OnrKtzZJ3gDG7vADA58B3lAaY6gutFZP6oYay8VMFBSC404M1RII2DeomtGXOwOJIHt4LFdOOB7NvWmL4bnJQ2ertVP4NdKdnXNiLJX7zmYOHEbwOAe5bg7YOitoXbPeILxqBlXb7oxm5LU0EojdM3GAH5ac44cVJr1sJ0dqTZzb9CagoTcLNb4mR00khAmjLQQHteBwdxPLvQGnG0TY3b73pe1VW0DpRC82WtqI5KKKa2+FF0r8gObGKokc8E44dqx3TDsnyb1TsPszazxm2itkVMKrdx1wbPHh+MnmB3nmthdK9BDZbpm9sucoul5ETt6Klr6hj4Wn1tDBvfXlTbax0atM7XdRaavV6rrjb5NPRiOkgoXRsiLQ9rwCCwnHm4wCOCA9vSVYyPo\\/bQ2RtaxjLHMA1owBw5YWsHRj1\\/U7Meh1rjVdvpPDq233ycxRuORvPjpmBxHcN7ePqC3V11oyk1\\/o286Xu000NFdqR1LPJCQHhrhxIyCMqIbLdgmmtlWgLlom2vqbvZblUTTVTbi5ry\\/rY2RubwAG7usHDHegNOtKU172tbHr5tD2g7db1YI2CpjfaqWu6mM7vmsY5u+M9YSGhuOO8O9Tn+pucNK68zzNwpTxzyMTsHip9b+gTsqoLua8m81UODijnq2OiBIIz8wHIzkceYVkbEOj\\/Ydg8N9g0tcLlWwXiaKWRlbIxwiLA4Dc3Wt7HdueQQEd6Ztuqrl0d9XtoA55gZBUTNbnJiZMxzjw7hx+olRHov7VNEWjoz2Zt6vdrpzZaSoZc6WonjbJ\\/bpCRuOPnbwcAB2kgdq2irKKCvpZaWshjqKeZpZLFI3ea9pHEEHmFrHeugRsru98NygN3tcTn7z6KlqmiE+rzmlwHsKArjbhrXRO0Xoo6nuWynTTrFa4rtRslYy1x0Yke14y4Nj4HdHAk8lnOjjtH0rpzoddTe7\\/b6GpoqW6QzQS1DRK2R8szmN6vO8SQ9uABxW0FBsx0xbNDfIqitVOzThpHUrqQsBa5hGCT3uOc73PKoyzdArZXarv4fP43uMI5UVRVNMGcc8BocfrKA1u6NIz0VOkBn6I7\\/AO3crT6BGuNN6Z2Nani1DfLdb5qa+TVUsVTVsjd1RpoMODXEEjLXD2ghXToToq6V2f7P9YaLtVzu09t1VEY62SofGZGAsLPMIYAOBPMKHv6Auy+WzUdufPeWyU7nF1XHURtlmBOcPO5goCiuiRqFtNtM2562s1OZbZR2qsrYIsENeTM6WNpA7wwr67MbpqzpGWTVWrtdbaLhountchjFvtdZ4KxrNzIcRvtAaclueOcHK3Y2bbHNKbKtMSaf0rb2top8ipfOA+SoyMHrHADe4Ej61UVV0EtllVqSW8Bl0ghlfvut8dS0U+c55bucerOEBrx0BHt8M2rbshkb4lGHOPFwzJglTz+pr\\/3NbQA7n4fR8\\/8AFyK8tlPRW0psful+rdL3O8SMvdG6kqIKmaNzGMJz5uGDiOOM5Wb2H9H+wbBqC80elq64VrLrLHLK6texxaWNIGN1o7CgNYdgtZ4t6Ze22oLC9sUVzkDAcb27Usdw+ofisTs\\/1lrPpQa+1lHeNptx2dWe0N6yGltdQYSWb7m8y5vzQ3JPrW1+iejvp3Q21LUu0K3V9yqbtqATCpgnewwN62Rr3boDQebeGSeahOseg9sy1nqqfUFSLnbJamfrqimoahjIZXE5OWlhxk88FAazdEKGKm6XeoYKW8zahp46W4sjuc0vWPrGiRgEznZOS7G8Tk8Sv0uVD7POifozZhtGbrTSNXdKSdsD4G0BlYacMc0NIxub35oPzufFXwgCIiAIiIAiIgCIiAhWp9kGg9aV3h2rNI2a8VhABnqqJj3kDllxGSpDYtN2jS9vZb9OW2ltVCwktp6WFsbATzOAOfAe5ZREAREQBERAEREAREQHR7y3kPwXQzHkC3KofpUbaKrZHpCnbYHsbf7rL1VK55GImNGXvwefYPaQqasmxDb1qLT1NqV+1KvorjUxCoioJq2obwcMhp3TuNPHlulehwfAnXwkcZicRGhCcnGOZSeZreyS0S5tmiVW0ssVc3fMmEbISM8Mexau9GjbleNT6a1NR7SzM64aZjE0lYYiHTwBr97IAGXN6t2cDjkK2dl+2vSu2CO5HQ9TU1TbYYxU9dTPi3es3t353P5jlQx\\/Ccdw6tVp1Y3VNpOUdY62yu\\/rvpoZQqRmk+3kWS6QtaXOwAOax1Ff7fcp5ILbX0dXNEMvjhmbI5vtAPBQPTe2zSWudUX7SVhqama82mOY1cb6V7GN3DuOw48DxIWlHRR2gad2baz1zetY3CO30ZpxGwuGXyPM5OGt5uOATw9avYTgOKxOGxNRqUZ0oxkoZbykpOy9m9766GM6qjJJcz9JWOLm5OMrnJUA2c7YdIbU6eeTR13iqnwf22B\\/5OVoPIlh449eF4NoW3vQWzKoFLqm\\/wAUdaRvGlpwZ5Wj++a3JH14XGWDxbrOgqUs6\\/ts791r++1vWbc8bXvoWa55HIfguA8kcf1KCbP9rukdp9PJNo68wVz4Wh0sBO5MwE4Bcw8QCVHpekjs8pNQXyx3C9ihr7KxzqvwmMxs4fmsceDncfmjipWCxsqkqapScoq7jld167Wvb3GOeO9y3muycLsqu2edIDQW026S2zSl6bNXRtc7qZ2GF7wOZaHYLgPUrQDgeRCxrYethp9HWg4vsaadu3W2hlGSls7nydNhxbw54XZr3E5wMdi0ch1nqR\\/TYZZTqG7Gy+MpmeAeHy+DlogcQ3qt7dxkZ5c1vC138YY9vBXeK8MqcKdFVJp9JCM1ZNWUrqzvv7jXTqdJfTZn0yV0L3A8B+Chu0DappPZpRCp1feKehLhmODfBlfz+azmeR5LD7Ptumhdp0rqbSV8jqK1oLvBZvyM5aOZDHYJA7wqSweLlR6xGnLo1\\/dZtd9v+c7GzNG9rlliQkDllcdackYC0R6SXSauFFr2123ZvqW4W6G0SywXqKOLca+RsgyPOB3sNDxwU023dKqyzbNIXbOr5X2+\\/wByLX0UwpCw7rJd2QFzhgcj7l6Gn+FuKVI4SSjpX20\\/byvL66cjV00Vf1G3e+7sxlC9w7lr50Xdt9JtK0jS2e5XOpuWrrZSdbdJJoC3e3pHbpDuDTwwOCkesekxs10PdjbLxqKOWsYcSMo4zUCM9zi0EA+olcerwvHUsXPCRpuU4XvZN7c9tnyvubFOLipX3LgdI4AkDKB5I5DKjNr17YL5piTUlmuUNws8cLpnzU7xJuhrcuBA5EDs5qsKXpdbLauzuukV6lbA2pFMIpKV7ZnPIzkRnzi3j87ktNPAY6tKSp0pPLo0ottP16XXvSIc4rdl677\\/AFIHnHEDKqrTPSB0Xq3W02jrRU1YvsTXOMNRRviB3Whxw48+BBX11lt90boTVtv0rfqqpN8rTE2KnpqV0xzI4NYDu8iSfdxTqGOVXonSlmtmtZ\\/t7f8AfYnNHtLUREVYzCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIuM8VFwaD\\/1QSGpGq9GzuOKPwGZjc8t\\/rBn8N38VvBZnMms1A6nI6l1PEWYOPNLRj8FXPSC2Mw7atIi1GqZQV9JN19FUOYHBr8EFru3dIPZ2gKiKDR3SgsmnG6Ut1baDbo4+qhrvC2CVkYGAA7mPdlezqVMHxjhGFwzxEKc6DmnGcsqcZO91dO\\/s3ZUWalUlKzdzYDUmu9Laq0Trmk07eaO5VNFZqzr2QO3nRDqng5+sfgtcv6nmN2n2hnmS63jA9lR8VbWwjo6N2ZaQ1FSX+tZXXrUkPVV8sTctiZuObuNJ4u4vcSe0qn9B7DtuOxO+36DZo2yV1suRbH4VWVAHmMLtx5ZlpDhvnvV3CVOELAcQ4XhcVHynTcZTkoqWX91nZ8729Ri1PNCTjtc46NwB6Te1TiB+Qr+H\\/WWKC9ELZ\\/pvXe0rVTNXWyK6soKd0lPHNksaXSkElvacYxn1q5OjzsS1\\/s+2oapv+taemmp7lQTRNrI6pj+ulfK1+Q0HeHAHmAoFsy2Dbc9mGob3f8ASdLZ6armBiFNWVjJGVUbnl2fMdlpbhvMjn24XdxfFMDVnjaVDGwjKVGhGMs9k3FK9mvYaowksrcXu+R56HTlHso6alpsujWGjtVXPGHUzXEhrJoC5zePYHcR3ZWTuldssp9rd5bobQl72maudUzuq4aqdvgjZd47+N5p5HOMtwMcFMtkHR71w7a1JtL2w1sDLrDM6aCnp5mzb7nMcziRkNa0EAAHPALC27Ybtg2SbTL5qDZXHZLzR3aSXJr6jc3WPeX4e3IOQTzBPLktdXinDa9fo3i4upChCDfSOMJzT1TmldpLba75mUYTS0jpd8rkC2E1NXbelhVwR2MaSNSZ457O2UPbTAsa7c3gADyB5LNbP9A2DaH0stdUmrLfFcaSmM1UyCQnc6wFgGQOY87kpJs42I7VLNt\\/p9c62obfWRVMj5K2qo6xm4wuZjDWEhxAwByU32WbItW6W6RGstYXehhisNzilZSztqmPc4ucwjzAd4cGnmAo4jxnAwnXnSxMVJ4aEU4z3mpK6Tbu2rdwpwm0k48+wp+9aXtOz7pp6Ytuk6NlsoJZadxghPmgyRPDwPUcLfwDh+para12OavvfSj09rqht8Mmm6N1L11T4SwOG4x4d5hO8eJHYtpWvdujOAvGfiTiOGxtHAzjVU5KilJ3u8yb0b7TfQg4uenM0GpT\\/wCvlEMcfGk3\\/wBs9b+vdgD2rSDXGxTa9TbfrhtD0FZKCoDKx81G+orYg1wLCzzmF4PI5x3qeW+99KM11N4z05pnwQysEpE0WQzeG8RiXOQMrt8do4fitPC1aGKpeRRjFp1EndXbVrX59u5rouVPNeL37CqmWeh2v9M67W3WcJrbbQCRkNO8locyCMbjT6suJI7clY3pWaOtOxPXuj9S7OqcWWsma6bqKd2I2vic3BDc8N4OwRyOFcG1bYHrODao3absgq6Jt3cGdfRVTuqa54aWuO9wBa5u7kZznPFR6Ho+bStru0a2am26y263W2gDNyhoJxJvBrg4MDfOADj845K7eH41gFUw+M63FUIUckqblq5KMk1ktrmbTzGrJN3jl1bvcg\\/TJstsoddaAqaO3U1NNcYnz1fVRNb173TMJc7hxPE8+8q5+llovT9p2G3Ca22ahpZaWenZDJHA1rmNdMN7dIHDJK+XSr2Cal2qS6auuhpKZ1dZ2SRGmmmEW8xxDgWuPDILcYPes3qLQW0HafsCuem9eNttBq+WRr6ZtPJvQuEbmuYHuy7BO6QSCexcihxjBxwnCK0sSl0M2ppy8pXndNrmsul+w2OnLNNZd1oRvZfT0WkOiHUaqstupqa+O07WvfVxxgSvc10oYXOxkgYHD1LWnYtWaXtmnKqo1NsqvGvamsqJGmrhhdLGxg3eDcfnAk5PrC2p2EbPNpFo0bdtAbU6C2Q6RFsmo6N9PUCWZ5lc7eBwSMbr3EHA7FA9KbHtuuw+5XCi2XT2e\\/afqXb7Iq6oDBvYA3ywkYd5o5Eg9y6NDieAoy4hh3Xg6lSanF9JKMZRd7RzxTaa002MXCTyNp2S7P4MB0a6XUVjptqVurbLc7Lputs9VVUsNZA5hjduuAALgOO47HrwsR0PtiWj9p1q1BddZW59xnt9XFFTs69zGNDo97JA5nOFs3s90ptKi0Rqyn2n3Ojul4vDJnUtNC7LKfejLRGH8Bu5xwxw71HeiJsp1Vso09qOk1tQxUM1bWxSwNZUsm3mtj3SctJxx71Uxf4ipSwXEXTrQjVlKilkluoq0mm7N6bvmTGl5ULq615WKs24WKm2N9JHQmvaXNPaLlPEyrAJdu7gbDJw9cRB582leXZRbaXbF0uNVatc7wq32ed1TTv44dubsMPD2NJ\\/FW302NM0182OPuU0zIZ7NWxTw73N+\\/8Ak3MH1Oz\\/AJq8nQp2e\\/JXZu\\/UlTJvVmppOvawD+1wsc5jBnnxwXfWFup8Uw0fwv1+cv6yi8On2pyUr+3K2g6cumy203No0RF8wL4REQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAXRzc8F3RRYFIbROjZbNo2qqrUFbq3VVplqGRsNNb64RQt3WhuQ0tPE4UWPQzsv\\/L\\/XX+tG\\/wAxbMIu1S43xOhSVKnWaitErR2+H+TU6UG7tGsp6GlmPD5fa6\\/1o3+Yn9ZnZj\\/7wNdf6zbw\\/kLZpFs\\/UHFr36w+6P2DoqfZ9fE1l\\/rMrK3lr\\/XX+tG\\/zE\\/rM7L\\/AMv9c\\/6zb\\/MWzSIuP8VW1d\\/+37SOhp3vb\\/neazf1mtl4\\/wDn9rrh\\/wDM2\\/zFy7oZ2Xs1\\/rr\\/AFo3+YtmEWb\\/ABFxd\\/577o\\/YFRprl\\/zvNZR0M7KcE6\\/11n\\/6m3+YuR0NLKB\\/d\\/ro\\/wDajf5i2ZRYL8QcXX\\/5D7o\\/YOhp9n18TWX+s0sx56\\/11n\\/6m3+Yg6GNl\\/8AiBrr\\/Wbf5i2aRZfqHi9\\/+u+6P2DoafZ9fE1l\\/rMbL\\/8AEDXX+s2\\/zFyOhlZR\\/wC8DXR\\/7Ub\\/ADFsyij9QcWvfp33R+wnoafZ\\/wA7zWb+szso5a\\/11\\/rRv8xcf1mdl\\/5f66H\\/AGo3+YtmkRfiDiy2rvuj9pHQ0+z6+JrL\\/WZ2cH+7\\/XX+s2\\/zEHQ0s4zjX+uR\\/wBpt\\/mLZpFP6h4utesS7o\\/YOhp9n18TWYdDOzf8v9df6zb\\/ADEPQzsoGPl\\/rr\\/Wbf5i2ZRP1Dxe3+IfdH7Cehp9n\\/O81l\\/rM7KOWv8AXX+s2\\/zEPQzswBA1\\/rnj\\/wDM2\\/zFs0ij9QcX\\/wD2Jf8At+wjoafZ9fE08vPQfqLpdo4htDvUunfNdLBWuNRMSP4pJDPrLeClFB0MrFbHUpotb60iipnNLIWXBjWDdOcYDOA9i2bRbKv4k4xWpqnKu0kraKK9\\/wCzflfcdBSTvl+viERF503BERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREARcFwbzOFxvtzjP4IDsi677c4yuQQeSA5Rcbw5dvcm8O9AcouC4A4QPaTgEZQHKIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiArTbQ672qzWnU9hrJ4WacuMddcaeN5DamhwWztcBz3WOLxz4tUG1htTl0bqDU+q5qh9bavC6LTNoojM9tN4UcyzVEhYHOwDK1mWtJIjIxx4XxdKCG60FTQ1bOsp6qF8Mre9jmlrh7iQq5tmw+wW3ZzbNFxVFwfBbanwuluDp\\/7Ljqd9zxOJMfOBcccOXDigI5YttN61PaKP5P221VtzmvwtPWGeoipJGGkdUCZjnxB\\/Ju6WlvMEZHNW1YZ71uVvymhoICyfFM6kme8Pi3R5z95o3Xb28McRgDisLbdn\\/gfiqS4367Xiqt9wfXNnrJWFz3uhdDukNa1rWhjzwaBx48yVnbTZnW51z8Ir6m4srap87WVG6WwtcAOrYAB5nDtyeJQFI0mr7\\/qPblo66Ry1Fv0jW01zgoaYSnq6yONkZbVSAcMve4hg\\/iR72fOwJht5gukehqu72XUNxssls3JeronNb15MjBh7iCd3BPAYXvn2L6Odqyz6joLLRW2ttQmETaKjhha50jQN9xa3O83d80g5BJWZvOiI79oubTF1uVbUQ1DAyWrc5nXuAeHg\\/N3c5AHLl60BI6yGSelnghqHU80kbmslaATGSCA4A88HioJsmhuFI3VtBdb1W3x9BfnwxVNY4F+4aanfjgAAN6RxwpbLappb9T3M3Cqjihp3Quo2ub1Mhc4EPIxneAGOBHA+pdLDYobLVXmemfI83WvNbMJHA7rzHHHujA5YiHfxygM4iIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgP\\/9k=");
                String base64 = "RmxvcmlkYQogICAgICAgICAgICAgICAgICAgICAK8J+XkyAyMDIzLTA1LTIwIC0gTWVkaW8gRMOtYQoKICAgICAgICAgICAgICAgICAgICAgCvCflKUgUGljayAyIOKGkiAjIDQ4IPCflKUKICAgICAgICAgICAgICAgICAgICAgCvCflKUgUGljayAzIOKGkiAjIDE1OCDwn5SlCiAgICAgICAgICAgICAgICAgICAgIArwn5SlIFBpY2sgNCDihpIgIyA1MjI2IPCflKUKICAgICAgICAgICAgICAgICAgICAgCvCflKUgUGljayA1IOKGkiAjIDE1Njc0IPCflKUKICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgCiBCb2xpdGVyb3N2NS4wLjAgCiAgICAgICAKIE5vdGlmaWNhIGFsIHNhbGlyIGVsIHJlc3VsdGFkbwogICAgICAgCiBpbnN0YWxhbGEgZGVzZGUgcGxheXN0b3JlCiAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgIAogLS1Nb2RvcyBkZSBKdWVnby0tCiAgICAgICAgICAgICAgICAgICAgIArinIUgQ2VudGVuYSDihpIgIDE1OAogICAgICAgICAgICAgICAgICAgICAK4pyFIEZpam8g4oaSICA1OAogICAgICAgICAgICAgICAgICAgICAK4pyFIFBhckZyb250YWwg4oaSICAxNQogICAgICAgICAgICAgICAgICAgICAK4pyFIENvcnJpZG9zIOKGkiAgNTggfCA1MiB8IDI2CiAgICAgICAgICAgICAgICAgICAgIArinIUgUGFybGUg4oaSICA1OC01MiB8IDU4LTI2IHwgIDUyLTI2CiAgICAgICAgICAgICAgICAgICAgIArinIUgUGljayA0IOKGkiAgNTIyNgoKICAgICAgICAgICAgICAgICAgICAgCuKaoO+4j1Jlc3VsdGFkbyBkZXNkZSBAYm9saXRlcm9zdG9wX2JvdOKaoO+4jw==";

                byte[] decodedString = Base64.decode(base64, Base64.DEFAULT);
                byte[] decodedString2 = Base64.decode(base642, Base64.DEFAULT);
                myListData = new PronosticoData[]{
                        new PronosticoData("texto de prueba","text", decodedString),
                        new PronosticoData("imagen de prueba","jpg", decodedString2),
                        new PronosticoData("texto de prueba2","text", decodedString),
                        new PronosticoData("imagen de prueba3","jpg", decodedString2),
                        new PronosticoData("texto de prueba4","text", decodedString),
                        new PronosticoData("imagen de prueba5","jpg", decodedString2),
                        new PronosticoData("texto de prueba6","text", decodedString),
                        new PronosticoData("imagen de prueba7","jpg", decodedString2),
                        new PronosticoData("texto de prueba8","text", decodedString),
                        new PronosticoData("imagen de prueba9","jpg", decodedString2)
                };*/
                recyclerView = (RecyclerView) binding.recicleradivinanza;
                //adapter = new AdivinanzaAdapter(myListData, this);

                recyclerView.setHasFixedSize(false);
                recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
                //recyclerView.setAdapter(adapter);
            }

            sharedPref = getActivity().getSharedPreferences(
                        getString(R.string.preference_file_key), Context.MODE_PRIVATE);
            /*if(Build.VERSION.SDK_INT >= 19) {
                //ca-app-pub-3940256099942544/1033173712
                InterstitialAd.load(getActivity().getApplicationContext(), "ca-app-pub-3940256099942544/1033173712", adRequest,
                        new InterstitialAdLoadCallback() {
                            @Override
                            public void onAdLoaded(@NonNull InterstitialAd interstitialAd) {
                                // The mInterstitialAd reference will be null until
                                // an ad is loaded.
                                mInterstitialAd = interstitialAd;
                                //mFirebaseAnalytics.logEvent(FirebaseAnalytics.Event.AD_IMPRESSION, bundle);
                                Log.i(DEBUG_TAG, "onAdLoaded");
                                if (getActivity() != null) {
                                    configureInterstitial();
                                }
                            }

                            @Override
                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {
                                // Handle the error
                                Log.d(DEBUG_TAG, loadAdError.toString());
                                mInterstitialAd = null;
                            }
                        });
            }*/
            try {
                getSaves();
            } catch (JSONException e) {
                //throw new RuntimeException(e);
            } catch (UnsupportedEncodingException e) {
                //throw new RuntimeException(e);
            }
        }

    }

    private void getSaves() throws JSONException, UnsupportedEncodingException {
        String saves = sharedPref.getString("filenames", null);
        nFiles = sharedPref.getStringSet("trueFiles", null);

        if(saves != null) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                byte[] data = Base64.decode(saves, Base64.DEFAULT);
                String text = new String(data, StandardCharsets.UTF_8);
                Log.d(DEBUG_TAG, "SAVED: " + text);
                filenames = new JSONObject(text);
            } else {
                byte[] data = Base64.decode(saves, Base64.DEFAULT);
                String text = new String(data, "UTF-8");
                Log.d(DEBUG_TAG, "SAVED: " + text);
                filenames = new JSONObject(text);
            }
            try {
                loadFile(filenames);
            }
            catch (UnsupportedEncodingException e0){}
            catch (JSONException e1){}
        }

        TimeZone tz = TimeZone.getTimeZone("America/New_York");
        TimeZone.setDefault(tz);

        Calendar fecha = Calendar.getInstance(TimeZone.getTimeZone(TimeZone.getDefault().getID()), Locale.US);

        long i = sharedPref.getLong("checkUpdateImages",0);
        if(fecha.getTimeInMillis() > i) {
            Log.e(DEBUG_TAG, "YA PASO 5m");
            downloadData();
        }else{
            Log.e(DEBUG_TAG, "NO PASO 5m");
            if(nFiles != null)
            {
                //downloadData();
                Log.e(DEBUG_TAG, "Pero hay descargas pendientes, nFiles no NULL");
            }
        }
    }
    private void setSaves(JSONObject files) throws UnsupportedEncodingException {
        SharedPreferences.Editor edit = sharedPref.edit();
        String text = files.toString();
        String base64;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            byte[] data = text.getBytes(StandardCharsets.UTF_8);
            base64 = Base64.encodeToString(data, Base64.DEFAULT);
        } else {
            byte[] data = text.getBytes("UTF-8");
            base64 = Base64.encodeToString(data, Base64.DEFAULT);
        }
        filenames = files;
        edit.putString("filenames", base64);

        TimeZone tz = TimeZone.getTimeZone("America/New_York");
        TimeZone.setDefault(tz);

        Calendar fecha = Calendar.getInstance(TimeZone.getTimeZone(TimeZone.getDefault().getID()), Locale.US);

        fecha.add(Calendar.MINUTE, 5);

        edit.putLong("checkUpdateImages", fecha.getTimeInMillis());
        edit.apply();
    }

    private boolean needUpdateFile(String x, Integer z) throws JSONException {
        boolean res = false;
        if(filenames != null){
            JSONArray jsonArray = filenames.names();
            if(jsonArray != null) {
                for (int i = 0; i < jsonArray.length(); i++) {
                    String key = jsonArray.getString(i);
                    if(Objects.equals(x, key)) {
                        if (z != null) {
                            int value = filenames.getInt(key);
                            if (value < z) {
                                res = true;
                                break;
                            }
                            else {
                                if(nFiles != null)
                                    if(!nFiles.contains(x)
                                    ){
                                        res = true;
                                        break;
                                    }
                            }
                        }
                    }
                }
            }
        }
        else{
            res = true;
        }
        return res;
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        if (mySnackbar != null) {
            if (mySnackbar.isShown())
                mySnackbar.dismiss();
        }
        if (requestQueue != null) {
            try {
                requestQueue.cancelAll(stringRequest);
            }catch (NullPointerException e){}

            requestQueue.stop();

            //if (stringRequest != null) {
            //    stringRequest.cancel();
            //}
        }
        binding = null;
        recyclerView = null;
        adapter = null;
        //mInterstitialAd = null;
    }
    private void downloadData(){

        if (getActivity() != null) {
            keyNames.clear();
            requestQueue = Volley.newRequestQueue(getActivity());
        }
        //}
            /*catch (Exception e){
                Log.e(DEBUG_TAG, "Volley Error : " + e.getMessage());
                //throw new RuntimeException(e);
            }*/
        if (requestQueue != null && binding != null) {
            binding.progressbar6.setVisibility(View.VISIBLE);
            binding.textViewProgress.setVisibility(View.VISIBLE);
            String url;
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                url = "https://cubanapp.info/api/photo/index.php";
            }else{
                url = "http://cubanapp.info/api/photo/index.php";
            }
            //String url = "https://cubanapp.info/api/suserinfo.php";
            JSONObject json = new JSONObject();

            try {
                json.put("apiKey", apiKey);
            } catch (JSONException e) {
                //try {
                if (getActivity() != null) {
                    mySnackbar = Snackbar.make(getActivity().findViewById(R.id.container),
                            getString(R.string.errorData), Snackbar.LENGTH_LONG).setAction(getString(R.string.retry), v -> downloadData());
                    mySnackbar.show();
                }
                //} catch (Exception ei) {
                // Log.e(DEBUG_TAG, "SnackbarError1 : " + ei.getMessage());
                //}
                Log.e(DEBUG_TAG, "JSONException : " + e.getMessage());
                //throw new RuntimeException(e);
                //startLaunch(false);
                binding.progressbar6.setVisibility(View.GONE);
                binding.textViewProgress.setVisibility(View.GONE);
            }
            // Request a string response from the provided URL.
            stringRequest = new JsonObjectRequest(Request.Method.POST, url, json,
                    response -> {
                        try {
                            if (getActivity() != null && binding != null) {
                                if (response.toString() != null) {
                                    Iterator<String> keys = response.keys();
                                    boolean error = false;
                                    while (keys.hasNext()) {
                                        String key = keys.next();
                                        if (key.equals("error")) {
                                            error = true;
                                            mySnackbar = Snackbar.make(getActivity().findViewById(R.id.container),
                                                    response.getString("msg"), Snackbar.LENGTH_LONG);
                                            mySnackbar.show();
                                            binding.progressbar6.setVisibility(View.GONE);
                                            binding.textViewProgress.setVisibility(View.GONE);
                                            break;
                                        } else {
                                            if(filenames != null) {
                                                if (filenames.has(key)) {
                                                    if (needUpdateFile(key, response.getInt(key))) {
                                                        keyNames.add(key);
                                                        Log.i(DEBUG_TAG, "File Updated: " + key);
                                                    }

                                                } else {
                                                    Log.i(DEBUG_TAG, "File Added: " + key);
                                                    keyNames.add(key);
                                                }
                                            }
                                            else {
                                                Log.i(DEBUG_TAG, "No savegame, File Added: " + key);
                                                keyNames.add(key);
                                            }
                                        }
                                    }
                                    if(!error) {
                                        showAds();
                                        if(keyNames.size() > 0) {
                                            Log.e(DEBUG_TAG, "Descarga nueva");
                                            // TODO: Guardar sólo los archivos descargados correctamente si no se omite.
                                            setSaves(response);
                                            //filenames = response;
                                            String msg = getString(R.string.filesdownload)+ " 0 / " + keyNames.size();
                                            if(getActivity() != null && binding != null) {

                                                binding.textViewProgress.setText(msg);

                                            }

                                            downloadFiles(keyNames);
                                        }else{ // Nada nuevo que descargar
                                            Log.i(DEBUG_TAG, "Nada nuevo que descargar");
                                            binding.progressbar6.setVisibility(View.GONE);
                                            binding.textViewProgress.setVisibility(View.GONE);
                                            SharedPreferences.Editor edit = sharedPref.edit();

                                            TimeZone tz = TimeZone.getTimeZone("America/New_York");
                                            TimeZone.setDefault(tz);

                                            Calendar fecha = Calendar.getInstance(TimeZone.getTimeZone(TimeZone.getDefault().getID()), Locale.US);

                                            fecha.add(Calendar.MINUTE, 5);

                                            edit.putLong("checkUpdateImages", fecha.getTimeInMillis());
                                            edit.apply();
                                        }

                                    }


                                    //Log.d(DEBUG_TAG, "Response is: " + response);

                                } else {
                                    /*if (getActivity() != null) {
                                        mySnackbar = Snackbar.make(getActivity().findViewById(R.id.container),
                                                getString(R.string.internalerror), Snackbar.LENGTH_LONG);
                                        mySnackbar.show();
                                    }*/
                                    if (binding != null) {
                                        binding.progressbar6.setVisibility(View.GONE);
                                        binding.textViewProgress.setVisibility(View.GONE);
                                    }
                                }
                            }
                        } catch (JSONException e) {
                            if (binding != null) {
                                binding.progressbar6.setVisibility(View.GONE);
                                binding.textViewProgress.setVisibility(View.GONE);
                            }
                            if (getActivity() != null) {
                                mySnackbar = Snackbar.make(getActivity().findViewById(R.id.container),
                                        getString(R.string.generateData), Snackbar.LENGTH_LONG).setAction(getString(R.string.retry), v -> downloadData());
                                mySnackbar.show();
                            }
                            Log.e(DEBUG_TAG, "JSONException2 : " + e.getMessage());
                        } catch (UnsupportedEncodingException e) {
                            if (binding != null) {
                                binding.progressbar6.setVisibility(View.GONE);
                                binding.textViewProgress.setVisibility(View.GONE);
                            }
                            if (getActivity() != null) {
                                mySnackbar = Snackbar.make(getActivity().findViewById(R.id.container),
                                        getString(R.string.generateData), Snackbar.LENGTH_LONG).setAction(getString(R.string.retry), v -> downloadData());
                                mySnackbar.show();
                            }
                            Log.e(DEBUG_TAG, "Exception3 : " + e.getMessage());
                        }

                    }, error -> {
                if (binding != null) {
                    binding.progressbar6.setVisibility(View.GONE);
                    binding.textViewProgress.setVisibility(View.GONE);
                }

                if (error instanceof TimeoutError) {
                    //try {
                    /*if (getActivity() != null) {
                        mySnackbar = Snackbar.make(getActivity().findViewById(R.id.container),
                                getString(R.string.slowconn), Snackbar.LENGTH_LONG).setAction(getString(R.string.retry), v -> downloadData());
                        mySnackbar.show();
                    }*/
                    //} catch (Exception e) {
                    //  Log.e(DEBUG_TAG, "SnackbarError4 : " + e.getMessage());
                    //}

                } else {
                    //try {
                    /*if (getActivity() != null) {
                        mySnackbar = Snackbar.make(getActivity().findViewById(R.id.container),
                                getString(R.string.lostsvr), Snackbar.LENGTH_LONG).setAction(getString(R.string.retry), v -> downloadData());
                        mySnackbar.show();
                    }*/
                    //} catch (Exception e) {
                    //   Log.e(DEBUG_TAG, "SnackbarError5 : " + e.getMessage());
                    //}
                }
                Log.e(DEBUG_TAG, "ERROR");
            });

            stringRequest.setRetryPolicy(new DefaultRetryPolicy(60000,
                    3, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
            // Add the request to the RequestQueue.
            requestQueue.add(stringRequest);
            if (binding != null)
                binding.progressbar6.setProgress(20);
        }
    }
    private void downloadFiles(ArrayList<String> files) throws UnsupportedEncodingException {
        if (getActivity() != null) {
            requestQueue = Volley.newRequestQueue(getActivity());
        }
        //}
            /*catch (Exception e){
                Log.e(DEBUG_TAG, "Volley Error : " + e.getMessage());
                //throw new RuntimeException(e);
            }*/
        if (requestQueue != null && binding != null) {
            //binding.progressbar6.setVisibility(View.GONE);
            String url;
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                url = "https://cubanapp.info/api/photo/index.php";
            } else {
                url = "http://cubanapp.info/api/photo/index.php";
            }
            ArrayList<JsonObjectRequest> jsonObjectRequestArrayList = new ArrayList<>();
            //ArrayList<String> filesSuccess = new ArrayList<>();
            for (int i = 0; i < files.size(); i++) {
                int d = i;
                JSONObject json = new JSONObject();

                try {
                    json.put("apiKey", apiKey);
                    json.put("file", files.get(i));
                } catch (JSONException e) {
                    Log.e(DEBUG_TAG, "JSONException : " + e.getMessage());
                }
                // Request a string response from the provided URL.
                stringRequest = new JsonObjectRequest(Request.Method.POST, url, json,
                        response -> {
                            try {
                                if (getActivity() != null && binding != null) {
                                    if (!response.has("error")) {
                                        if (response.has("type")) {
                                            String type = response.getString("type");
                                            Log.e(DEBUG_TAG, type);
                                            String base64 = response.getString("base64");
                                            Log.e(DEBUG_TAG, base64);
                                            byte[] decodedString = Base64.decode(base64, Base64.DEFAULT);

                                            String msg = getString(R.string.filesdownload) + " " + (d + 1) + " / " + keyNames.size();
                                            if(getActivity() != null && binding != null) {

                                                binding.textViewProgress.setText(msg);

                                            }

                                            //filesSuccess.add(files.get(d));

                                            saveFile(files.get(d), response, false);

                                            // TODO: Guardar esto para despues?
                                            if (recyclerView != null && getActivity() != null) {
                                                buildAdapter(files.get(d), type, decodedString);
                                            }

                                            if (d == (files.size() - 1)) {
                                                saveFile(files.get(d), response, true);
                                                if (binding != null) {
                                                    binding.progressbar6.setVisibility(View.GONE);
                                                    binding.textViewProgress.setVisibility(View.GONE);
                                                    if(getContext() != null)
                                                        Toast.makeText(getContext(), getString(R.string.finished),Toast.LENGTH_LONG).show();
                                                }
                                            }

                                        }

                                    } else {
                                        if (d == (files.size() - 1))
                                            if (binding != null) {
                                                binding.progressbar6.setVisibility(View.GONE);
                                                binding.textViewProgress.setVisibility(View.GONE);
                                            }
                                        //filesSuccess.remove(files.get(d));
                                        Log.e(DEBUG_TAG, "No response");
                                    }
                                }
                            } catch (JSONException e) {

                                if (d == (files.size() - 1))
                                    if (binding != null) {
                                        binding.progressbar6.setVisibility(View.GONE);
                                        binding.textViewProgress.setVisibility(View.GONE);
                                    }
                                //filesSuccess.remove(files.get(d));
                                Log.e(DEBUG_TAG, "JSONException2: " + e.getMessage());
                            } catch (UnsupportedEncodingException e) {
                                if (d == (files.size() - 1))
                                    if (binding != null){
                                        binding.progressbar6.setVisibility(View.GONE);
                                        binding.textViewProgress.setVisibility(View.GONE);
                                    }
                                Log.e(DEBUG_TAG, "UnsupportedEncodingException: " + e.getMessage());
                                //throw new RuntimeException(e);
                            }

                        }, error -> {
                    Log.e(DEBUG_TAG, "ERROR");
                    if (d == (files.size() - 1))
                        if (binding != null){
                            binding.progressbar6.setVisibility(View.GONE);
                            binding.textViewProgress.setVisibility(View.GONE);
                        }
                });

                stringRequest.setRetryPolicy(new DefaultRetryPolicy(60000,
                        1, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
                // Add the request to the RequestQueue.
                jsonObjectRequestArrayList.add(stringRequest);

            }

            if (jsonObjectRequestArrayList.size() > 0)
                for (JsonObjectRequest s : jsonObjectRequestArrayList) {
                    requestQueue.add(s);
                }

        }
    }

    private void buildAdapter(String name, String tipo, byte[] bytes){
        //myListData = new PronosticoData[]{new PronosticoData(name, tipo, bytes)};

        PronosticoData inputNew = new PronosticoData(name, tipo, bytes);
        //PronosticoData[] newData = myListData;
        ArrayList<PronosticoData> tempData = new ArrayList<>();

        if(myListData != null) {
            for (PronosticoData item : myListData) {
                tempData.add(item);

            }
        }
        tempData.add(inputNew);

        myListData = tempData.toArray(new PronosticoData[0]);

        adapter = new AdivinanzaAdapter(myListData, this);
        if(binding != null)
            recyclerView.setAdapter(adapter);
    }

    private void saveFile(String filename, JSONObject file, boolean last) throws UnsupportedEncodingException {
        SharedPreferences.Editor edit = sharedPref.edit();
        if(!last){
            if(nFiles == null) {
                nFiles = new HashSet<>();
                nFiles.add(filename);
            }
            else
                nFiles.add(filename);
        }
        else
            nFiles = null;
        String text = file.toString();
        String base64;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            byte[] data = text.getBytes(StandardCharsets.UTF_8);
            base64 = Base64.encodeToString(data, Base64.DEFAULT);
        } else {
            byte[] data = text.getBytes("UTF-8");
            base64 = Base64.encodeToString(data, Base64.DEFAULT);
        }

        edit.putString(filename, base64);
        edit.putStringSet("trueFiles",nFiles);
        edit.apply();

    }
    private void loadFile(JSONObject file) throws UnsupportedEncodingException, JSONException {

            JSONArray jsonArray = file.names();
            if(jsonArray != null) {

                ArrayList<PronosticoData> tempData = new ArrayList<>();

                for (int i = 0; i < jsonArray.length(); i++) {
                    String key = jsonArray.getString(i);

                    String saves = sharedPref.getString(key, null);

                    if(saves != null) {
                        JSONObject jsonFile;
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                            byte[] data = Base64.decode(saves, Base64.DEFAULT);
                            String text = new String(data, StandardCharsets.UTF_8);
                            jsonFile = new JSONObject(text);
                        } else {
                            byte[] data = Base64.decode(saves, Base64.DEFAULT);
                            String text = new String(data, "UTF-8");
                            jsonFile = new JSONObject(text);
                        }

                        String type = jsonFile.getString("type");
                        String base64 = jsonFile.getString("base64");
                        byte[] decodedString = Base64.decode(base64, Base64.DEFAULT);
                        tempData.add(new PronosticoData(key, type, decodedString));
                    }
                }

                if(tempData.size() > 0 && recyclerView != null && getActivity() != null) {
                    myListData = tempData.toArray(new PronosticoData[0]);

                    adapter = new AdivinanzaAdapter(myListData, this);
                    //recyclerView.setHasFixedSize(false);
                    //recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));

                    recyclerView.setAdapter(adapter);
                }

            }
    }

    /*private void configureInterstitial(){
        if(mInterstitialAd != null) {
            mInterstitialAd.setFullScreenContentCallback(new FullScreenContentCallback() {
                @Override
                public void onAdClicked() {
                    // Called when a click is recorded for an ad.
                    Log.d(DEBUG_TAG, "Ad was clicked.");
                }

                @Override
                public void onAdDismissedFullScreenContent() {
                    // Called when ad is dismissed.
                    // Set the ad reference to null so you don't show the ad a second time.
                    Log.d(DEBUG_TAG, "Ad dismissed fullscreen content.");
                    mInterstitialAd = null;
                }

                @Override
                public void onAdFailedToShowFullScreenContent(AdError adError) {
                    // Called when ad fails to show.
                    Log.e(DEBUG_TAG, "Ad failed to show fullscreen content.");
                    mInterstitialAd = null;
                }

                @Override
                public void onAdImpression() {
                    // Called when an impression is recorded for an ad.
                    Log.d(DEBUG_TAG, "Ad recorded an impression.");
                }

                @Override
                public void onAdShowedFullScreenContent() {
                    // Called when ad is shown.
                    Log.d(DEBUG_TAG, "Ad showed fullscreen content.");
                }
            });
        }
    }*/
    private void showAds(){
        if (getActivity() != null) {
            MainActivity mainActivity = (MainActivity) getActivity();
            if(mainActivity != null) {
                if(mainActivity.mInterstitialAd != null)
                    mainActivity.mInterstitialAd.show(getActivity());
                else
                    Log.d(DEBUG_TAG, "AD Still Not Loaded");
            }else
                Log.e(DEBUG_TAG, "MainActivity NOT FOUND");
        }else
            Log.e(DEBUG_TAG, "NO ACTIVITY FOUND");
    }

    @Override
    public void onItemClick(int position, byte[] bytes, String name, String type) {
        if (getActivity() != null) {
            Bundle bundle = new Bundle();
            bundle.putByteArray("base64", bytes);
            bundle.putString("name", name);
            bundle.putString("type", type);
            getParentFragmentManager().setFragmentResult("CUBANAPPImage", bundle);
            NavHostFragment.findNavController(this)
                    .navigate(R.id.action_navigation_adivinanza_to_navigation_imagefullscreen, bundle);
        }
    }
}
