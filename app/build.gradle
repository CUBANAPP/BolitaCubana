/*
 *      Bolita Cubana
 *      Copyright (C) 2019-2024 CUBANAPP LLC
 *
 *      This program is free software: you can redistribute it and/or modify
 *      it under the terms of the GNU Affero General Public License as
 *      published by the Free Software Foundation, either version 3 of the
 *      License, or (at your option) any later version.
 *
 *      This program is distributed in the hope that it will be useful,
 *      but WITHOUT ANY WARRANTY; without even the implied warranty of
 *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *      GNU Affero General Public License for more details.
 *
 *      You should have received a copy of the GNU Affero General Public License
 *      along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *      Email contact: help@cubanapp.info
 */

plugins {
    id 'com.android.application'

    id 'org.jetbrains.kotlin.android'

    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    // Make sure that you have the Google services Gradle plugin
    id 'com.google.gms.google-services'
    // Add the Performance Monitoring Gradle plugin
    id 'com.google.firebase.firebase-perf'
    // Add the Crashlytics Gradle plugin
    id 'com.google.firebase.crashlytics'

    id 'androidx.navigation.safeargs'
}
def localPropertiesFile = rootProject.file("local.properties")
def localProperties = new Properties()
localProperties.load(new FileInputStream(localPropertiesFile))

android {
    signingConfigs {
        debug {
            storeFile file('D:\\Users\\PREDATOR\\.android\\debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file(localProperties["KEYSTOREFILE"])
            storePassword localProperties["KEYSTOREPSWD"]
            keyAlias localProperties["ALIAS"]
            keyPassword localProperties["ALIAS_KEY"]
        }
    }
    namespace 'com.cubanapp.bolitacubana'
    compileSdk 34

    defaultConfig {
        // should correspond to key/value pairs inside the file
        applicationId "com.cubanapp.bolitacubana"
        targetSdk 34
        minSdk 1
        versionCode 137
        versionName "2.2.3-Debug"
        resourceConfigurations += ['en', 'es']
        //testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.debug
        multiDexEnabled true
        testFunctionalTest false
        testHandleProfiling false
    }

    buildTypes {
        debug {
            buildConfigField("String", "ADS_KEY", localProperties['ADS_KEY'])
            buildConfigField("String", "API_KEY", localProperties['API_KEY'])
            crunchPngs false
            shrinkResources false
            minifyEnabled false
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            signingConfig signingConfigs.debug
            multiDexEnabled true
        }
        release {
            buildConfigField("String", "ADS_KEY", localProperties['ADS_KEY'])
            buildConfigField("String", "API_KEY", localProperties['API_KEY'])
            crunchPngs true
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            firebaseCrashlytics {
                mappingFileUploadEnabled true
            }
            jniDebuggable false
            debuggable false
            renderscriptDebuggable false
            signingConfig signingConfigs.release
            multiDexEnabled true
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE.txt', 'META-INF/LICENSE-FIREBASE.txt', 'META-INF/NOTICE.txt', 'META-INF/cubanapp.pem']
        }
    }
// Instead, use the bundle block to control which types of configuration APKs
    // you want your app bundle to support.
    bundle {
        language {
            // Specifies that the app bundle should not support
            // configuration APKs for language resources. These
            // resources are instead packaged with each base and
            // feature APK.
            enableSplit = false
        }
        density {
            // This property is set to true by default.
            enableSplit = false
        }
        abi {
            // This property is set to true by default.
            enableSplit = false
        }
    }
    splits{
        // Configures multiple APKs based on screen density.
        /*density {

            // Configures multiple APKs based on screen density.
            enable false

            // Specifies a list of screen densities Gradle should not create multiple APKs for.
            //exclude "ldpi", "xxhdpi", "xxxhdpi"

            // Specifies a list of compatible screen size settings for the manifest.
            //compatibleScreens 'small', 'normal', 'large', 'xlarge'
        }*/
        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable false

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            //reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            //include "x86", "x86_64"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    buildFeatures {
        viewBinding true
        buildConfig true
    }
    dependenciesInfo {
        includeInApk false
        includeInBundle false
    }
    flavorDimensions 'version'
    productFlavors {
        minApi16 {
            dimension 'version'
            versionNameSuffix "-minApi16"
            minSdk 16
            versionCode 136
        }
        minApi21 {
            dimension 'version'
            versionNameSuffix '-minApi21'
            minSdk 21
            versionCode 137
        }
    }
    //buildToolsVersion '34.0.0'
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:33.1.1')
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.7.7'
    implementation 'androidx.navigation:navigation-ui-ktx:2.7.7'
    implementation 'androidx.preference:preference-ktx:1.2.1'
    implementation 'com.google.guava:guava:33.2.0-android'

    // Specific dependencies for minApi16
    minApi16Implementation('com.android.volley:volley:1.2.1') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    minApi16Implementation( 'androidx.core:core-ktx:1.10.1') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    minApi16Implementation( 'androidx.appcompat:appcompat:1.4.0') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    minApi16Implementation( 'androidx.appcompat:appcompat-resources:1.4.0') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    minApi16Implementation( 'com.google.android.material:material:1.3.0') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    minApi16Implementation( 'androidx.vectordrawable:vectordrawable:1.0.0') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    minApi16Implementation( 'androidx.vectordrawable:vectordrawable-animated:1.0.0') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    minApi16Implementation( 'androidx.webkit:webkit:1.6.0') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    //minApi16Implementation 'com.google.android.gms:play-services-base:15.0.1'

    // Specific dependencies for minApi21
    minApi21Implementation 'com.android.volley:volley:1.2.1'
    minApi21Implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    minApi21Implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    minApi21Implementation 'androidx.core:core-ktx:1.13.1'
    minApi21Implementation 'androidx.appcompat:appcompat:1.7.0'
    minApi21Implementation 'androidx.appcompat:appcompat-resources:1.7.0'
    minApi21Implementation 'com.google.android.material:material:1.12.0'
    minApi21Implementation 'androidx.vectordrawable:vectordrawable:1.2.0'
    minApi21Implementation 'androidx.vectordrawable:vectordrawable-animated:1.2.0'
    minApi21Implementation 'androidx.webkit:webkit:1.11.0'
    minApi21Implementation 'com.google.android.gms:play-services-ads:23.1.0'
    minApi21Implementation 'com.google.android.gms:play-services-location:21.3.0'
    minApi21Implementation 'com.google.android.gms:play-services-ads-identifier:18.1.0'
    minApi21Implementation 'com.google.android.gms:play-services-measurement-api:22.0.2'
    minApi21Implementation 'com.google.android.gms:play-services-base:18.5.0'
    minApi21Implementation 'com.google.android.ump:user-messaging-platform:2.2.0'


    // Firebase dependencies only for minApi21
    minApi21Implementation 'com.google.firebase:firebase-analytics'
    minApi21Implementation 'com.google.firebase:firebase-inappmessaging'
    minApi21Implementation 'com.google.firebase:firebase-inappmessaging-display'
    minApi21Implementation 'com.google.firebase:firebase-messaging'
    minApi21Implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-perf'
    minApi21Implementation 'com.google.firebase:firebase-messaging-directboot'
}
